{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>This is just a placeholder file for the webpage re-direct. All the content for this section is actually in the <code>getting_started.md</code> file.</p>"},{"location":"background/","title":"Background Information","text":"<p>Below, are several articles, application notes, and other technical resources on 3-phase motors and utilizing a field oriented control (FOC) scheme:</p> <ul> <li>Microchip Technology<ul> <li>AN885: Brushless DC (BLDC) Motor Fundamentals</li> <li>AN2757: Sensored (Encoder-Based) Field Oriented Control of Three-Phase Permanent Magnet Synchronous Motor (PMSM)</li> <li>AN1078: Sensorless Field Oriented Control of a PMSM</li> <li>AVR32723: Sensor Field Oriented Control for Brushless DC motors with AT32UC3B0256</li> </ul> </li> <li>Diodes Incorporated<ul> <li>AN1164: Introduction to Brushless DC Motors</li> </ul> </li> <li>Monolithic Power Systems<ul> <li>AN047: Brushless DC Motor Fundamentals</li> </ul> </li> <li>Texas Instruments<ul> <li>Demystifying BLDC motor commutation: Trap, Sine, &amp; FOC</li> <li>Sensored Field Oriented Control of 3-Phase Permanent Magnet Synchronous Motors</li> <li>Sensorless Field Oriented Control of 3-Phase Permanent Magnet Synchronous Motors</li> <li>Brushless-DC Motor Driver Considerations and Selection Guide</li> <li>High Performance Brushless DC Motor Control</li> <li> Field oriented control of permanent magnet synchronous motors</li> <li> Field Oriented Control of Permanent Magnet Motors<ul> <li> Field Oriented Control of Permanent Magnet Motors</li> </ul> </li> </ul> </li> <li>MATLAB<ul> <li> Motor Control, Part 4: Understanding Field-Oriented Control</li> </ul> </li> <li>Analog Devices + Trinamic<ul> <li>FOC As Hardware Building Block</li> </ul> </li> <li>Infineon Technologies<ul> <li>Motor Handbook</li> <li>AN204469 - FM3 Family 3-Phase PMSM FOC Control</li> <li>Block commutation vs. FOC in power tool motor control</li> <li> Motor control for BLDC: block commutation vs. field-oriented control</li> </ul> </li> <li>ST Microelectronics<ul> <li>AN5397: Current Sensing in Motion Control Applications</li> <li>AN4220: Sensorless Six-Step BLDC Commutation</li> </ul> </li> </ul>"},{"location":"component_assembly/","title":"Hardware Components","text":""},{"location":"component_assembly/#tmc6300-motor-driver","title":"TMC6300 Motor Driver","text":""},{"location":"component_assembly/#headers","title":"Headers","text":"New to soldering? <p>If you have never soldered before or need a quick refresher, check out our How to Solder: Through-Hole Soldering guide. <p> How to Solder: Through-Hole Soldering </p></p> <p>The pins on the SparkFun TMC6300 motor driver are broken out to 0.1\"-spaced pins on the outer edges of the board. When selecting headers, be sure you are aware of the functionality and board orientation required.</p> <p></p> <p>Soldering headers to the TMC6300 motor driver.</p> <p>Tip</p> <p>Please be aware that the side of the board with the silkscreen labeld for the pins and the heat sink pad is, technically the top side of the board when in use.</p> <ul> <li> <p>      Top side of the TMC6300 motor driver.      </p> </li> <li> <p>      Bottom side of the TMC6300 motor driver.      </p> </li> </ul> <p>Staggered PTH Pins</p> <p>The pins on the board may appear to be offset or crooked; this is by design, we stagger the holes along a specific center alignment. This reduces the geometric tolerance between the holes and header pins along a single axis, which helps to hold the header in place and keeps the pins more orthogonal to the board when soldering.</p>"},{"location":"component_assembly/#heat-sink","title":"Heat Sink","text":"<p>Tip</p> <p>With larger heat sinks, we recommend a test fit and attaching it last to avoid conflicts with other parts of the board. For example, the heat sink could block the PTH pins/slots or access to the jumper pad.</p> <p>Copper Heat Sink</p> <p>Users may be tempted to use our copper heatsink on their board. However, we highly advise against using the copper heat sink because it barely fits and will likely cause a short across one of the pins.</p> <ul> <li> <p>      Different heat sinks next to the TMC6300 motor driver.      </p> </li> <li> <p>      Copper heat sink not fitting on the TMC6300 motor driver.      </p> </li> </ul> <p> Different heat sinks next to the TMC6300 motor driver. Copper heat sink not fitting on the TMC6300 motor driver. </p> <p>To attach a heat sink to the board, users will also need a piece of thermal tape. We recommend the following procedure:</p> <ol> <li> <p>Cut out a piece of thermal tape to fit the bottom of the heat sink.</p> <p>Tip</p> <p>Covering the entire bottom of the heat sink can insulate the electrical contacts on the board from shorting.</p> <ul> <li>For a perfect fit, users can place the heat sink over the tape and trace the outline to cut with scissors.</li> <li>For a perfect fit, users can also place the heat sink over the tape and cut the outline with a hobby knife.</li> </ul> <p>  Cutting the thermal tape to fit the heat sink.  </p> </li> <li> <p>Place the piece of thermal tape on the bottom of the heat sink.</p> <p>Tip</p> <p>We recommend peeling off just one side of the backing sheet or release liner to place the thermal tape on the heat sink. Users can then peel the other side off when they are ready to place the heat sink on their board.</p> </li> <li> <p>Attach the heat sink to the board.</p> <ul> <li>Make sure to make any jumper modifications and/or solder any connections before placing the heat sink on the board.</li> <li>Make sure to avoid any electrical contact with the sides of the heat sink.</li> </ul> <p> Heat sink attached to the TMC6300 motor driver.  </p> </li> </ol>"},{"location":"component_assembly/#bldc-gimbal-motor","title":"BLDC Gimbal Motor","text":"<p>Advanced Skills Required</p> <p>To connect the gimbal motor to the TMC6300 motor driver board, some advanced soldering and wire stripping skills are necessary. The wire leads from the motor are only about 2\" long, which is not a lot to work with. Users may only have two attempts at stripping the wires before they run out the available wire length.</p> New to soldering? <p>If you have never soldered before or need a quick refresher, check out our How to Solder: Through-Hole Soldering guide. <p> How to Solder: Through-Hole Soldering </p></p> <p>To connect the gimbal motor to the TMC6300 motor driver, users will need to expose the wiring. First, remove the JST connector and make sure to cut as close to the plastic housing as possible.</p> <p></p> <p>Cut off the plastic JST connector on the motor's wire leads.</p> Alternative Connections <p>If users are utilize the alligator or IC hook pigtails, they may be able to crack the plastic housing of the connector to expose the crimped wire terminals.</p> <p>Next, with as much care as possible, strip off some of the electrical insulation of each of the leads. On our wire strippers, the 26AWG notch worked the best.</p> <p></p> <p>Strip off some of the insulation from the motor's wire leads.</p> <p>The last step is to twist and tin the wires, so that they can be inserted into some jumper wires. Make sure to keep the ends straight and avoid adding to much solder, so that the wire ends can still fit into the female jumper wire terminals.</p> <p> Twist and tin the exposed wire leads, so that they can be inserted into the female end of a jumper wire. The leads should be straight and clear of bulges fit the into female terminals. <p></p> <ul> <li> <p>      Twist and tin the exposed wire leads, so that they can be inserted into the femal end of a jumper wire.      </p> </li> <li> <p>      The leads should be straight and clear of bulges fit the female terminals of the jumper wire.      </p> </li> </ul>"},{"location":"hard_copy/","title":"Hard copy","text":"<p>Need to download or print our hookup guide?</p> <ul> <li>Print  (Single-Page View)<ul> <li>To save as a <code>*.pdf</code> file, select the Printer or Destination labeled Save as PDF. (Instructions will vary based on the browser)</li> </ul> </li> <li>Download  (Beta - demonstration only)</li> </ul>"},{"location":"hardware_assembly/","title":"Example Setups","text":""},{"location":"hardware_assembly/#assembly-for-examples","title":"Assembly for Examples","text":"<p>The following instructions are for wiring up the RedBoard Plus, TMC6300 motor driver, and motor for the examples provided in this tutorial. </p>"},{"location":"hardware_assembly/#redboard-plus-to-tmc6300","title":"RedBoard Plus to TMC6300","text":"<p>For ease of use, connect the TMC6300 motor driver with headers attached to the center of breadboard. The pin layout should perfectly align, so that users will have three breadboard pins available on each side of the TMC6300 breakout board. Then, following the table below, connect the pins from the RedBoard Plus to breadboard pins associated with the motor driver.</p> <p> RedBoard <code>3</code> <code>5</code> <code>6</code> <code>9</code> <code>10</code> <code>11</code> <code>12</code> <code>GND</code> Motor Driver <code>UL</code> <code>WL</code> <code>WH</code> <code>VL</code> <code>VH</code> <code>UH</code> <code>VIO</code> <code>GND</code> <p></p> <p></p> <p>A graphical representation of the connections between the RedBoard Plus and a breadboard with the TMC6300 motor driver attached.</p> <p>Timer Pins</p> <p>As mentioned in the Simple FOC library documentation, </p>"},{"location":"hardware_assembly/#arduino-uno-support","title":"Arduino UNO support","text":"<p>Arduino UNO and all the atmega328 based boards have only 6 PWM pins and in order to use the <code>BLDCDrievr6PWM</code> we need to use all of them. Those are <code>3</code>,<code>5</code>,<code>6</code>,<code>9</code>,<code>10</code> and <code>11</code>.  Furthermore in order for the algorithm to work well we need to use the PWM pins that belong to the same timer for each high/low side pair of each phase. So Atmega328 pins belonging to the timers are:</p> <code>TIM0</code> <code>TIM1</code> <code>TIM2</code> <code>5</code>,<code>6</code> <code>9</code>,<code>10</code> <code>3</code>,<code>11</code> <p>Therefore it is important that <code>phA_h</code> and <code>phA_l</code> belong to one timer, <code>phB_h</code> and <code>phB_l</code> to second timer and <code>phC_h</code> and <code>phC_l</code> to the last timer. If we decide that phase <code>A</code> belongs to the timer <code>TIM0</code> we can set <code>phA_h</code> either to pin <code>5</code> or pin <code>6</code>.  </p>"},{"location":"hardware_assembly/#motor-to-tmc6300","title":"Motor to TMC6300","text":"<p>Connecting a motor to the TMC6300 motor driver straight forward. Users, just need to connect the half-bridge drive channels with the ends of the motor's stator coils.</p> <ul> <li>Utilizing two half-bridges to drive a brushed DC motor with a full H-bridge</li> <li>Utilizing three half-bridges to drive a brushless DC motor</li> </ul>"},{"location":"hardware_assembly/#bldc-gimbal-motor","title":"BLDC Gimbal Motor","text":"<p>Connecting a 3-phase, BLDC motor to the motor driver is relatively simple as the sequence of the wires connection doesn't matter. Using jumper wires, connect the prepared ends of the gimbal stabilizer motor to the <code>U</code>, <code>V</code>, and <code>W</code> pins of the TMC6300 breakout board.</p> <p></p> <p>A prepared end of the gimbal motor being inserted into the female terminals of a jumper wire.</p> <p>Tip</p> <p>Users may want to prop up the base of the gimbal motor, as the magnetic end of the motor shaft protudes below its base plate. Users can see a demonstration in the video below:</p> <p>  Video with Gimbal Motor  </p> Reversing the Rotation of the Motor <p>For a 3-phase brushless motor, the connection sequence of the wires to a BLDC motor doesn't necessarily matter; the direction that the motor spins can be controlled through the software. However, for reference, switching two of the output channels to the motor will automatically reverse the direction that the motor was spinning.</p> <ul> <li>If users swap just the <code>U</code> and <code>V</code> connections, leaving the <code>W</code> connection alone, the motor will now spin in the opposite direction of the original configuration.</li> </ul>"},{"location":"hardware_assembly/#dc-hobby-motor","title":"DC Hobby Motor","text":"<p>If this was a H-bridge motor driver, the connections to the motor wouldn't matter. However, as there are three half-bridges, users will need to note which half-bridges the DC motor is connected to. These connections will dictate how the motor is driven by the software. For the example, connect the motor to the <code>V</code> and <code>W</code> output channels of the TMC6300 motor driver.</p> Reversing the Rotation of the Motor <p>For a  single phase DC motor, the direction that the motor spins can be controlled through the software. However, for reference, switching the polarity of the motor's wires will also reverse the direction that the motor was spinning.</p>"},{"location":"hardware_assembly/#powering-the-tmc6300","title":"Powering the TMC6300","text":"<p>Enough power should be provided to the TMC6300 to drive the motor connected to it. Therefore, the drive current and voltage range of the motor should be taken into consideration. Additionally, users should monitor the drive current to prevent overheating of the TMC6300 motor driver.</p> <p>Ideally, if users have access to a variable power supply, it would be the most convenient solution for adjusting the voltage and source current parameters. Other power supply alternatives include a 6V (4xAA) battery pack or dual-cell LiPo battery. However, if users are unable to find a suitable power source, we have found that the 5V power output from the RedBoard Plus is sufficient to drive the gimbal motor, under a no load condition at low speeds.</p> <p> RedBoard <code>5V</code> <code>GND</code> Motor Driver <code>VIN</code> <code>GND</code> <p></p> <p></p> <p>A graphical representation of the connections between the RedBoard Plus and a breadboard with the TMC6300 motor driver attached.</p> Current Monitoring <p>For the examples in this tutorial, the motor will be driven with a no-load condition and the motor drive current shouldn't need to be monitored. (An exception would be when the motor is hindered from spinning, in which case the torque and drive current will spike.)</p>"},{"location":"hardware_overview/","title":"Hardware Overview","text":""},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>The board dimensions are illustrated in the drawing below; the listed measurements are in inches.</p> <p></p> <p>Board dimensions (PDF) for the TMC6300 motor driver breakout board, in inches.</p> Need more measurements? <p>For more information about the board's dimensions, users can download the eagle files for the board. These files can be opened in Eagle and additional measurements can be made with the dimensions tool.</p>  Eagle - Free Download! <p>Eagle is a CAD program for electronics that is free to use for hobbyists and students. However, it does require an account registration to utilize the software.</p> <p> Download fromAutodesk primary logo </p>  Dimensions Tool <p>This video from Autodesk demonstrates how to utilize the dimensions tool in Eagle, to include additional measurements:</p> <p> </p>"},{"location":"hardware_overview/#power","title":"Power","text":"<p>Users are provided with PTH to connect their external power supply, I/O logic-level voltage, and the regulated 1.8V output. The TMC6300 motor driver has an input voltage range of 2.0V to 11.0V.</p> <p></p> <p>The power connections on the TMC6300 motor driver.</p> <p>Below, is a general summary of the circuitry on the board:</p> <ul> <li><code>VIN</code> - Power supply input<ul> <li>Range: 2 to 11V</li> </ul> </li> <li><code>VIO</code> - I/O supply voltage<ul> <li>Range: 1.8 to 5.25V</li> <li><code>NSTDBY</code> - IC goes to standby mode and resets when this pin is pulled to <code>GND</code></li> </ul> </li> <li><code>VCP</code> - Charge pump voltage</li> <li><code>GND</code> - The common ground or the 0V reference for the board</li> </ul> <p>Info</p> <p>For more details, users can reference the schematic and the TMC6300 datasheets.</p> Motor Voltage <p>Even though the input voltage range for the motor driver goes down to 2V, users will need to provide the minimum operating voltage for their motor. Our Gimbal Stabilizer Motor has an operating voltage range of 6 - 8V.</p>"},{"location":"hardware_overview/#power-led","title":"Power LED","text":"<p>The red, power (<code>PWR</code>) LED will light up when a power supply is connected to the board. However, the LED can be disabled for low-power applications by cutting the jumper.</p> <p></p> <p>The <code>PWR</code> status LED indicator for the TMC6300 motor driver.</p>"},{"location":"hardware_overview/#viostandby-pin","title":"<code>VIO</code>/Standby Pin","text":"<p>In it's default configuration, the <code>VIO</code> pin is used to enable the motor driver and set the logic level voltage (1.8 to 5.25V) for the I/O pins. However, the <code>VIO</code> pin also operates as a standby pin when it is pulled <code>LOW</code>. In standby, the TMC6300 resets and sits in standby mode.</p> <p></p> <p><code>VIO</code> pin on the TMC6300 motor driver.</p>"},{"location":"hardware_overview/#vcppin","title":"<code>VCP</code>\u00a0Pin","text":"<p>The <code>VCP</code> pin is broken out for users to include an external charge pump capacitor. Adding an external capacitor would help stabilize the supply voltage, from the large voltage swings (dV/dt) of the motor driver's operation. A 1nF to 100nF capacitor rated at 10V, is recommended by the datasheet.</p> <p></p> <p><code>VCP</code> pin on the TMC6300 motor driver.</p>"},{"location":"hardware_overview/#tmc6300","title":"TMC6300","text":"<p>The TMC6300 from Trinamic Motion Control, part of Analog Devices, is a low voltage, 3-Phase BLDC/PMSM motor driver utilizing separate high-side and low-side control signals for its three half-bridges.</p> <p> <p>Features:</p> <ul> <li>VIN: 2.0V to 11.0V<ul> <li>Operating current: 7mA</li> <li>Standby current: 30nA</li> </ul> </li> <li>VOUT: 1.8V</li> <li>3 Half-Bridges<ul> <li>3 High-side MOSFETs</li> <li>3 Low-side MOSFETs</li> </ul> </li> <li>I/O Supply Voltage Input</li> <li>Diagnostic Output</li> <li>Overtemperature Protection<ul> <li>Shutdown Temperature: 150\u00b0C</li> <li>Typical Power Dissipation: 1W</li> </ul> </li> <li>Short Protection</li> </ul> TMC6300 chip on the TMC6300 motor driver. <p></p> <ul> <li> <p>Features:</p> <ul> <li>VIN: 2.0V to 11.0V<ul> <li>Operating current: 7mA</li> <li>Standby current: 30nA</li> </ul> </li> <li>VOUT: 1.8V</li> <li>3 Half-Bridges<ul> <li>3 High-side MOSFETs</li> <li>3 Low-side MOSFETs</li> </ul> </li> <li>I/O Supply Voltage Input</li> <li>Diagnostic Output</li> <li>Overtemperature Protection<ul> <li>Shutdown Temperature: 150\u00b0C</li> <li>Typical Power Dissipation: 1W</li> </ul> </li> <li>Short Protection</li> </ul> </li> <li> <p>      TMC6300 chip on the TMC6300 motor driver.      </p> </li> </ul> <p>Info</p> <p>For more details, please refer to the TMC6300 datasheet and application note.</p> Chip Protections <p>The TMC6300 features the overtemperature and short protections:</p> <ul> <li>The overtemperature protection feature implements a two temperature thresholds; however, the datasheet warns users that this should only be relied on as an emergency percaution and may not prevent the destruction of the IC. This is due to several factors including that excess heat can generate quickly before the overtemperature sensor can react. Therefore, users should prevent this situation from occuring by design with methods such as adequate heat dissipation.</li> <li>The short protection feature gaurds the motor commutation channels by monitoring the current flowing through each of the power stage MOSFETs. Once a short condition (short to <code>GND</code> or <code>VS</code>) is safely detected, all driver bridges become switched off, and the <code>DIAG</code> output becomes set. In order to restart the motor, the users must must disable and restart the TMC6300. As with the overtemperature protection, the datasheet warns users that this feature should only be relied on as an emergency percaution and may not prevent the destruction of the IC or detect all possible short events.</li> </ul> <p>By monitoring the current draw through the <code>SEN</code> pin, users can also implement an over current protection scheme in their software. This can also aid in preventing a trigger in the overtemperature protection and validating a short detection.</p> Maximum Load Current <p>When pushing the maximum load current of 2A, users should monitor the current draw through the <code>SEN</code> pin and add a heat sink to provide additional heat dissipation. This should precautions can help to avoid damaging the IC.</p>"},{"location":"hardware_overview/#motor-commutation","title":"Motor Commutation","text":"<p>The TMC6300 relies on an electrical commutation sequence/signal to drive the motor phases to a BLDC or PMSM motor. The commutation signals for these motors are trapezoidal for BLDC motors and sinusoidal for PMSM motors.</p> <ul> <li> <p>      Trapezoidal motor commutation.      </p> </li> <li> <p>      Sinusoidal motor commutation.      </p> </li> </ul> <p> (Source: Brushless-DC Motor Driver Considerations and Selection Guide application note) </p> <p>For a trapezoidal signal, the high-side (HS) and low-side (LS) MOSFETs, can just be driven high or low. However, in order to approximate a sinusoidal signal, a progressively varying PWM signal must be provided from the microcontroller and all six signal should be in sync with each other.</p> <p></p> <p>Sinusoidal PWM signal. (Source: Demystifying BLDC motor commutation: Trap, Sine, &amp; FOC)</p> PMSM vs BLDC Motor <p>A BLDC motor (sometimes referred to as a BLDM) and a PMSM (sometimes referred to as an AC synchronus motor) for the most part will appear the same in their internal construction. The difference between these types of motors is in their stator windings. This means that their commutation (the electrical signals used to drive the motor) is different.</p> <ul> <li>In a BLDC motor, the windings are concentrated on salient poles, requiring a voltage waveform that's more trapeziodal than sinusoidal.</li> <li>In a PMSM, the windings are distributed over several poles, requiring a voltage waveform that's more more sinusoidal.</li> </ul> <p>Gimbal Motor</p> <p>Based on measuring the output from one of the coils, our gimbal motor is a PMSM and would require a sinusoidal waveform to drive the motor. It should be noted that a trapezodial waveform can probably be used; however, users may notice effects such as cogging.</p> Alternative Use Cases <p>While this IC is intended to be used to drive 3-Phase BLDC/PMSM motors, users can easily adapt their hardware and software to work with other moters. For example, users could use two half-bridges to form an H-bridge and adapt their control software to drive a brushed, DC motor.</p>"},{"location":"hardware_overview/#io-pins","title":"I/O Pins","text":"<p>There are several I/O pins for the TMC6300. Some of the pins are detailed in the power section above; the <code>VOUT</code> pin is ommitted because it isn't broken out.</p>"},{"location":"hardware_overview/#half-bridges","title":"Half-Bridges","text":"<p>The TMC6300 features high-side and low-side MOSFET pairs of the three available half-bridges which control the commutation of the three motor phases.</p> <p></p> <p>6 PWM control of a 3-phase motor commutation. (Source: Modified from the Block commutation vs. FOC in power tool motor control application note)</p> InputOutput <p>The electronic commutation sequence of these pins will depend on the motor that is connected. For most cases, users will provide a PWM signal to each of the pins. These are active-high pins with logic levels controlled by the <code>VIO</code> pin.</p> <p>  The six control pins (<code>UL</code>/<code>UH</code>, <code>VL</code>/<code>VH</code>, and <code>WL</code>/<code>WH</code>) for the three half-bridges of the TMC6300 motor driver.  </p> Active High <p>By pulling the pin high, the MOSFET will enable power to flow through that section of the half-bridge.</p> Microcontroller Limitations <p>Users will need to use pins capable of providing a PWM signal. In addition, for the recommended Simple FOC Arduino library, users will also need to consider the supported microcontroller as well as the configuration for the 6PWM mode.</p> <p>With the electronic commutation sequence provided to the half-bridges, the output motor phases will drive a connected motor.</p> <p>  The three motor phase outputs (<code>U</code>/<code>V</code>/<code>W</code>) from the TMC6300, used to drive a motor.  </p> Wiring Sequence <p>For a 3-phase brushless motor, the connection sequence of the wires to a BLDC motor doesn't necessarily matter; the direction that the motor spins can be controlled through the software. However, for reference, switching two of the output channels to the motor will automatically reverse the direction that the motor was spinning.</p> <ul> <li>If users swap the <code>U</code> and <code>V</code> connections, but leave the <code>W</code> connection alone, the motor will now spin in the opposite direction of the original configuration.</li> </ul>"},{"location":"hardware_overview/#diagnostic-pin","title":"Diagnostic Pin","text":"<p>The diagnostic pin is triggered based on different faults (i.e. shorts and overtemperature) detected by the IC. By default, the status will be indicated by the, green diagnostic, <code>D</code> LED and will remail <code>LOW</code> until triggered. Once triggered, users will need to disable and reset the TMC6300 or power cycle the board.</p> <p></p> <p>The <code>DIAG</code> pin on the TMC6300 motor driver.</p> <p>Users can also monitor the <code>DIAG</code> pin, so their microcontroller knows when to reset the TMC6300 to clear the fault.</p>"},{"location":"hardware_overview/#current-sense-pin","title":"Current Sense Pin","text":"<p>The current sense pin is the foot point of the <code>U</code> and <code>V</code> half-bridges, with a 0.12\u03a9 resistor attached. Users can measure the voltage across the <code>SENSE</code> and <code>GND</code> pins to determine the current flowing to the motor; however, it is recommended that an op-amp be attached to amplify the signal.</p> <p></p> <p>The <code>SEN</code> pin on the TMC6300 motor driver.</p>"},{"location":"hardware_overview/#leds","title":"LEDs","text":"<p>There are three status indicator LEDs on the TMC6300 motor driver:</p> <ul> <li><code>V</code> - Power (Red)<ul> <li>Turns on once power is supplies to the <code>VIN</code> pin</li> </ul> </li> <li><code>D</code> - Diagnostics (Green)<ul> <li>Turns on to indicate a fault (see diagnostic pin section)</li> </ul> </li> <li><code>S</code> - Standby (Blue)<ul> <li>Turns on when the motor driver is enabled</li> <li>Turns off, when the IC has been reset and the motor driver is in standby mode</li> </ul> </li> </ul> <p></p> <p>The status indicator LEDs on the TMC6300 motor driver.</p>"},{"location":"hardware_overview/#heat-sink-pad","title":"Heat Sink Pad","text":"<p>A 0.13\" x 0.14\" platted copper pad is provided on the top of the board, where users can add a heat sink to dissipate excess heat generated by the TMC6300. The pad can accommodate the small heatsink in our catalog.</p> Thermal Shutdown Temperature <p>The AP329A has a 160\u00b0C (320\u00b0F) thermal shutdown temperature. The TMC6300 will restart automatically when the junction temperature decreases to +130\u00b0C.</p> Copper Heat Sink <p>Users may be tempted to use our copper heatsink on their board. However, we highly advise against using the copper heatsink because it barely fits and will likely cause a short across one of the pins.</p> <p>  Copper heatsink not fitting on the TMC6300 motor driver.  </p> <p></p> <p>Heat sink pad on the top of the TMC6300 motor driver.</p>"},{"location":"hardware_overview/#jumpers","title":"Jumpers","text":"Never modified a jumper before? <p>Check out our Jumper Pads and PCB Traces tutorial for a quick introduction! <p> How to Work with Jumper Pads and PCB Traces </p></p> <p>There are three jumpers on the back of the board that can be used to easily modify a hardware connections on the board.</p> <ul> <li>V - This jumper can be used to remove power from the red, power LED.</li> <li>S - This jumper can be used to remove power from the blue, standby LED.</li> <li>D - This jumper can be used to remove power from the green, diagnostic LED.</li> </ul> <p></p> <p>The LED jumpers on the back of the TMC6300 motor driver.</p>"},{"location":"introduction/","title":"Introduction","text":"<ul> <li> <p> Brushless Motor Driver - 3 Phase (TMC6300) SKU: ROB-21867 <p> </p> <p> </p> <li> <p>The TMC6300 from ADI + Trinamic is a powerful and easy to use three phase motor driver that was designed to control our Brushless Gimbal Motor. However, it can be used to control any 3-phase BLDC or PMSM motor with up to 2A (1.4A<sub>RMS</sub>) of total drive current. Separate high-side and low-side control of the three half-bridges allows for incredible control of each phase of the motor commutation. The driver also provides temperature and short circuit protections; and a diagnostic output to indicate system faults. With a 1.8V regulated power output and an operating voltage down to 2V, the TMC6300 is suitable for low-power microcontroller and battery powered designs (min. 2 AA/NiMh cells, or 1-2 Li-Ion cells).</p> <p>Our board layout has been designed with the LEDs and labels facing up, IC down. This allows the thermal pad on the board to be access if cooling is required. Additionally, the breakout pins are specially aligned to fit perfectly onto a breadboard and hold the headers more perpendicular to facilitate assembly.</p> <p>Controlling 3-phase motors is not trivial and this board requires 6 PWM signals to fully control one motor. We've found the Arduino Simple Field Oriented Control library to work well with the board; however, there are some hadware limitations such as supported microconrollers for <code>6PWM Mode</code>. With additional considerations, for integrating position sensors into the feedback control loop.</p> <p> \u00a0\u00a0\u00a0Purchase from SparkFun  </p> </li>"},{"location":"introduction/#required-materials","title":"Required Materials","text":"<p>To get started, users will need a few items. Now some users may already have a few of these items, feel free to modify your cart accordingly.</p> <ul> <li>Computer with an operating system (OS) that is compatible with all the software installation requirements.</li> <li> <p>A compatible microcontroller/Arduino board; we recommend the SparkFun RedBoard Plus.</p> <p>Warning</p> <p>The recommended Arduino library for the TMC6300 motor driver is not compatible with all microcontrollers or boards. For a complete list of compatible microcontrollers and boards, please refer to the documentation for the Simple Field Oriented Control Library.</p> </li> <li> <p>USB 3.1 Cable A to C - 3 Foot - Used to interface with the RedBoard Plus (1)</p> <ol> <li>If your computer doesn't have a USB-A slot or your microcontroller/Arduino board has a different USB connector, then choose an appropriate cable or adapter.</li> </ol> </li> <li> <p>SparkFun Brushless Motor Driver - 3 Phase (TMC6300)</p> </li> <li> <p>BLDC Motor (1)</p> <ol> <li>This gimbal motor requires a 6 to 8V power supply. However, for zero-load, low-speed testing, we have found that users can get away with utilizing the 5V power from a RedBoard Plus.</li> </ol> </li> <li> <p>Power Supply</p> </li> <li> <p>Soldering Tools (1)</p> <ol> <li>Check out the beginner tool kit below; otherwise, click here for a full selection of our available soldering tools.</li> </ol> </li> <li> <p>Headers</p> </li> <li>Small Breadboard</li> <li>Jumper Wires</li> </ul> USB 3.1 Cable A to C - 3 Foot              CAB-14743          SparkFun RedBoard Plus              DEV-18158          SparkFun Brushless Motor Driver - 3 Phase (TMC6300)              ROB-21867          Breadboard - Self-Adhesive (White)              PRT-12002          SparkFun Beginner Tool Kit              TOL-14681          Break Away Headers - Straight              PRT-00116          Jumper Wires Premium 6\" M/M Pack of 10              PRT-08431          Jumper Wires Premium 6\" M/F Pack of 10              PRT-09140          Three Phase Brushless Gimbal Stabilizer Motor              ROB-20441          Power Supply - 80W DC Switching Mode              TOL-09291      <p>New to soldering?</p> <p>Check out our Through-Hole Soldering Tutorial for a quick introduction! <p> How to Solder: Through-Hole Soldering </p></p> <ul> <li> <p>USB 3.1 Cable A to C - 3 Foot     CAB-14743 <p> </p> <li> <p>SparkFun RedBoard Plus     DEV-18158 <p> </p> <li> <p> Brushless Motor Driver - 3 Phase (TMC6300)     ROB-21867 <p> </p> <li> <p> Breadboard - Self-Adhesive (White)     PRT-12002 <p> </p> <li> <p> SparkFun Beginner Tool Kit     TOL-14681 <p> </p> New to soldering? <p>Check out our Through-Hole Soldering Tutorial for a quick introduction! <p> How to Solder: Through-Hole Soldering </p></p> <li> <p> Break Away Headers - Straight     PRT-00116 <p> </p> <li> <p> Jumper Wires Premium 6\" M/M Pack of 10     PRT-08431 <p> </p> <li> <p> Jumper Wires Premium 6\" M/F Pack of 10     PRT-09140 <p> </p> <li> <p> Three Phase Brushless Gimbal Stabilizer Motor     ROB-20441 <p> </p> <li> <p> Power Supply - 80W DC Switching Mode     TOL-09291 <p> </p> Retired Product <p>Alternatively, a 4xAA battery holder and some AA batteries. However, the maximum current draw will be limited.</p> <li> <p> Banana to IC Hook Cables     CAB-00506 <p> </p> Charge Pump Capacitor <p>The datasheet recommends a 0.1\u00b5F capacitor for the charge pump pin, to stabilize the input power supply when there are large swings in the voltage to the motor. Below are links to our 0.1\u00b5F capacitors:</p> <p> Capacitor Ceramic 0.1uF              COM-08375          SparkFun Capacitor Kit              KIT-13698          </p> <ul> <li> <p> Capacitor Ceramic 0.1uF     COM-08375 <p> </p> <li> <p> SparkFun Capacitor Kit     KIT-13698 <p> </p> Heat Sink Accessories <p>To attach a heat sink to dissipate excess heat, users will want to check out the following components:</p> <p> Small Heatsink              PRT-11510          Thermal Tape 4x4\" Square              PRT-17054          Heatsink Compound              PRT-09599          </p> <ul> <li> <p> Small Heatsink     PRT-11510 <p> </p> <p>Thermal tape/compound is not included</p> <li> <p> Thermal Tape 4x4\" Square     PRT-17054 <p> </p> <li> <p> Heatsink Compound     PRT-09599 <p> </p> Current Sensing <p>To perform current sensing from the low-side MOSFETs, users will need to amplify the output signal. Here are some products that users may be interested in:</p> <p> SparkFun Configurable OpAmp Board - TSH82              BOB-14874          Break Away Headers - Straight              PRT-00116          SparkFun Beginner Tool Kit              TOL-14681          Hobby Knife              TOL-09200          </p> <ul> <li> <p> SparkFun Configurable OpAmp Board - TSH82     BOB-14874 <p> </p> New to jumper pads? <p>Check out our Jumper Pads and PCB Traces Tutorial for a quick introduction! <p> How to Work with Jumper Pads and PCB Traces </p></p> <li> <p> Break Away Headers - Straight     PRT-00116 <p> </p> <li> <p> SparkFun Beginner Tool Kit     TOL-14681 <p> </p> New to soldering? <p>Check out our Through-Hole Soldering Tutorial for a quick introduction! <p> How to Solder: Through-Hole Soldering </p></p> <li> <p> Hobby Knife     TOL-09200 <p> </p> Jumper Modification <p>To modify the jumper, users will need soldering equipment and/or a hobby knife.</p> <p>New to jumper pads?</p> <p>Check out our Jumper Pads and PCB Traces Tutorial for a quick introduction! <p> How to Work with Jumper Pads and PCB Traces </p></p> <p> Solder Lead Free - 100-gram Spool              TOL-09325          Weller WLC100 Soldering Station              TOL-14228          Chip Quik No-Clean Flux Pen - 10mL              TOL-14579          Hobby Knife              TOL-09200          </p> <ul> <li> <p> Solder Lead Free - 100-gram Spool     TOL-09325 <p> </p> <li> <p>Weller WLC100 Soldering Station     TOL-14228 <p> </p> <li> <p> Chip Quik No-Clean Flux Pen - 10mL     TOL-14579 <p> </p> <li> <p> Hobby Knife     TOL-09200 <p> </p> Alternative Motor Connections <p>For users with less precise soldering skills, we recommend these wiring options as they are less dependent on hoe the leads to the motor are tinned. Additionally, user may find the alligator clips useful for motors with thicker wires.</p> <p> IC Hook with Pigtail              CAB-09741          Alligator Clip with Pigtail (4 Pack)              CAB-13191          </p> <ul> <li> <p> IC Hook with Pigtail     CAB-09741 <p> </p> <li> <p> Alligator Clip with Pigtail (4 Pack)     CAB-13191 <p> </p> Alternative Power Source <p>Here are alternative battery options to power the TMC6300 motor driver. These batteries should be in the operation voltage range for the gimbal motor (just set the max charge to 8V). Additionally, they are capable of supplying more than the maximum current draw of the TMC6300.</p> <p> SkyRC IMAX B6 V2 Professional Balance Charger / Discharger              PRT-16793          Lithium Ion Battery - 2200mAh 7.4v              PRT-11856          Lithium Ion Battery - 1000mAh 7.4v              PRT-11855          </p> <ul> <li> <p> SkyRC IMAX B6 V2 Professional Balance Charger / Discharger     PRT-16793 <p> </p> <li> <p> Lithium Ion Battery - 2200mAh 7.4v     PRT-11856 <p> </p> <li> <p> Lithium Ion Battery - 1000mAh 7.4v     PRT-11855 <p> </p> DC Motor Example <p>For users who wish to try out the H-bridge/DC motor example, they will also need a DC motor:</p> <ul> <li> <p> Hobby Gearmotor - 140 RPM     ROB-21245 <p> </p>"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>As a more sophisticated product, we will skip over the more fundamental tutorials (i.e. Ohm's Law and What is Electricity?). However, below are a few tutorials that may help users familiarize themselves with various aspects of the board.</p> Electric Power Connector Basics Working with Wire How to Power a Project What is a Circuit? Alternating Current (AC) vs. Direct Current (DC) Polarity Logic Levels Installing the Arduino IDE Installing an Arduino Library How to Solder: Through-Hole Soldering How to Work with Jumper Pads and PCB Traces Motors and Selecting the Right One Pulse Width Modulation How to Use an Oscilloscope Serial Communication <ul> <li> <p> Electric Power <p> </p> <li> <p> Connector Basics <p> </p> <li> <p> Working with Wire <p> </p> <li> <p> How to Power a Project <p> </p> <li> <p> What is a Circuit? <p> </p> <li> <p> Alternating Current (AC) vs. Direct Current (DC) <p> </p> <li> <p> Polarity <p> </p> <li> <p> Logic Levels <p> </p> <li> <p>Installing the Arduino IDE <p> </p> <li> <p>Installing an Arduino Library <p> </p> <li> <p> How to Solder: Through-Hole Soldering <p> </p> <li> <p> How to Work with Jumper Pads and PCB Traces <p> </p> <li> <p> Motors and Selecting the Right One <p> </p> <li> <p> Pulse Width Modulation <p> </p> <li> <p> How to Use an Oscilloscope <p> </p> <li> <p> Serial Communication <p> </p> Need to control a different type of motor? <p>This tutorial is primarily focused on utilizing the TMC6300 motor driver to control a 3-phase brushless DC (BLDC) motor. While the versatility of this chipset allows for the control of other motor types, we would recommend less experienced users to explore products designed for those specific motors or actuators. Below, are additional product tutorials and resources for our other actuator and motor types:</p> Brushed DC MotorsStepper MotorsServos <ul> <li> <p> Hookup Guide for the Qwiic Motor Driver <p> </p> <li> <p> TB6612FNG Hookup Guide <p> </p> <ul> <li> <p> SparkFun ProDriver Hookup Guide <p> </p> <li> <p> Easy Driver Hook-up Guide <p> </p> <ul> <li> <p> Basic Servo Control for Beginners <p> </p> <li> <p> Hobby Servo Tutorial <p> </p> <li> <p> Pi Servo pHAT (v2) Hookup Guide <p> </p>"},{"location":"resources/","title":"Hardware Resources","text":""},{"location":"resources/#product-resources","title":"Product Resources","text":"<ul> <li> Product Page</li> <li>Component Documentation<ul> <li> TMC6300 Datasheet</li> </ul> </li> <li> Design Files:<ul> <li> Board Dimensions</li> <li> Schematic</li> <li> Eagle Files</li> </ul> </li> <li>Arduino Library:<ul> <li> Simple FOC</li> <li> Documentation<ul> <li>Installation</li> <li>Supported Hardware</li> <li>Code Overview</li> </ul> </li> </ul> </li> <li> SFE Product Showcase</li> <li> Hardware Repo</li> </ul>"},{"location":"resources/#additional-resources","title":"Additional Resources","text":"<ul> <li>Motors and Motor Driver Product Category</li> <li> SparkFun Technical Assistance</li> </ul>"},{"location":"resources/#manufacturers-resources","title":"\ud83c\udfed\u00a0Manufacturer's Resources","text":"<p>Analog Devices + Trinamic also provides great resources for the TMC6300 motor driver:</p> <ul> <li>TMC6300 Product Page<ul> <li>Block Diagram/Pinout</li> <li> Datasheet</li> <li> Application Notes</li> </ul> </li> <li> Trinamic: TMC6300 Product Training Module</li> <li> Technical Support Page</li> </ul> <p> </p>"},{"location":"single_page/","title":"Hardware Overview","text":""},{"location":"single_page/#board-dimensions","title":"Board Dimensions","text":"<p>The board dimensions are illustrated in the drawing below; the listed measurements are in inches.</p> <p></p> <p>Board dimensions (PDF) for the TMC6300 motor driver breakout board, in inches.</p> Need more measurements? <p>For more information about the board's dimensions, users can download the eagle files for the board. These files can be opened in Eagle and additional measurements can be made with the dimensions tool.</p>  Eagle - Free Download! <p>Eagle is a CAD program for electronics that is free to use for hobbyists and students. However, it does require an account registration to utilize the software.</p> <p> Download fromAutodesk primary logo </p>  Dimensions Tool <p>This video from Autodesk demonstrates how to utilize the dimensions tool in Eagle, to include additional measurements:</p> <p> </p>"},{"location":"single_page/#power","title":"Power","text":"<p>Users are provided with PTH to connect their external power supply, I/O logic-level voltage, and the regulated 1.8V output. The TMC6300 motor driver has an input voltage range of 2.0V to 11.0V.</p> <p></p> <p>The power connections on the TMC6300 motor driver.</p> <p>Below, is a general summary of the circuitry on the board:</p> <ul> <li><code>VIN</code> - Power supply input<ul> <li>Range: 2 to 11V</li> </ul> </li> <li><code>VIO</code> - I/O supply voltage<ul> <li>Range: 1.8 to 5.25V</li> <li><code>NSTDBY</code> - IC goes to standby mode and resets when this pin is pulled to <code>GND</code></li> </ul> </li> <li><code>VCP</code> - Charge pump voltage</li> <li><code>GND</code> - The common ground or the 0V reference for the board</li> </ul> <p>Info</p> <p>For more details, users can reference the schematic and the TMC6300 datasheets.</p> Motor Voltage <p>Even though the input voltage range for the motor driver goes down to 2V, users will need to provide the minimum operating voltage for their motor. Our Gimbal Stabilizer Motor has an operating voltage range of 6 - 8V.</p>"},{"location":"single_page/#power-led","title":"Power LED","text":"<p>The red, power (<code>PWR</code>) LED will light up when a power supply is connected to the board. However, the LED can be disabled for low-power applications by cutting the jumper.</p> <p></p> <p>The <code>PWR</code> status LED indicator for the TMC6300 motor driver.</p>"},{"location":"single_page/#viostandby-pin","title":"<code>VIO</code>/Standby Pin","text":"<p>In it's default configuration, the <code>VIO</code> pin is used to enable the motor driver and set the logic level voltage (1.8 to 5.25V) for the I/O pins. However, the <code>VIO</code> pin also operates as a standby pin when it is pulled <code>LOW</code>. In standby, the TMC6300 resets and sits in standby mode.</p> <p></p> <p><code>VIO</code> pin on the TMC6300 motor driver.</p>"},{"location":"single_page/#vcppin","title":"<code>VCP</code>\u00a0Pin","text":"<p>The <code>VCP</code> pin is broken out for users to include an external charge pump capacitor. Adding an external capacitor would help stabilize the supply voltage, from the large voltage swings (dV/dt) of the motor driver's operation. A 1nF to 100nF capacitor rated at 10V, is recommended by the datasheet.</p> <p></p> <p><code>VCP</code> pin on the TMC6300 motor driver.</p>"},{"location":"single_page/#tmc6300","title":"TMC6300","text":"<p>The TMC6300 from Trinamic Motion Control, part of Analog Devices, is a low voltage, 3-Phase BLDC/PMSM motor driver utilizing separate high-side and low-side control signals for its three half-bridges.</p> <p> <p>Features:</p> <ul> <li>VIN: 2.0V to 11.0V<ul> <li>Operating current: 7mA</li> <li>Standby current: 30nA</li> </ul> </li> <li>VOUT: 1.8V</li> <li>3 Half-Bridges<ul> <li>3 High-side MOSFETs</li> <li>3 Low-side MOSFETs</li> </ul> </li> <li>I/O Supply Voltage Input</li> <li>Diagnostic Output</li> <li>Overtemperature Protection<ul> <li>Shutdown Temperature: 150\u00b0C</li> <li>Typical Power Dissipation: 1W</li> </ul> </li> <li>Short Protection</li> </ul> TMC6300 chip on the TMC6300 motor driver. <p></p> <ul> <li> <p>Features:</p> <ul> <li>VIN: 2.0V to 11.0V<ul> <li>Operating current: 7mA</li> <li>Standby current: 30nA</li> </ul> </li> <li>VOUT: 1.8V</li> <li>3 Half-Bridges<ul> <li>3 High-side MOSFETs</li> <li>3 Low-side MOSFETs</li> </ul> </li> <li>I/O Supply Voltage Input</li> <li>Diagnostic Output</li> <li>Overtemperature Protection<ul> <li>Shutdown Temperature: 150\u00b0C</li> <li>Typical Power Dissipation: 1W</li> </ul> </li> <li>Short Protection</li> </ul> </li> <li> <p>      TMC6300 chip on the TMC6300 motor driver.      </p> </li> </ul> <p>Info</p> <p>For more details, please refer to the TMC6300 datasheet and application note.</p> Chip Protections <p>The TMC6300 features the overtemperature and short protections:</p> <ul> <li>The overtemperature protection feature implements a two temperature thresholds; however, the datasheet warns users that this should only be relied on as an emergency percaution and may not prevent the destruction of the IC. This is due to several factors including that excess heat can generate quickly before the overtemperature sensor can react. Therefore, users should prevent this situation from occuring by design with methods such as adequate heat dissipation.</li> <li>The short protection feature gaurds the motor commutation channels by monitoring the current flowing through each of the power stage MOSFETs. Once a short condition (short to <code>GND</code> or <code>VS</code>) is safely detected, all driver bridges become switched off, and the <code>DIAG</code> output becomes set. In order to restart the motor, the users must must disable and restart the TMC6300. As with the overtemperature protection, the datasheet warns users that this feature should only be relied on as an emergency percaution and may not prevent the destruction of the IC or detect all possible short events.</li> </ul> <p>By monitoring the current draw through the <code>SEN</code> pin, users can also implement an over current protection scheme in their software. This can also aid in preventing a trigger in the overtemperature protection and validating a short detection.</p> Maximum Load Current <p>When pushing the maximum load current of 2A, users should monitor the current draw through the <code>SEN</code> pin and add a heat sink to provide additional heat dissipation. This should precautions can help to avoid damaging the IC.</p>"},{"location":"single_page/#motor-commutation","title":"Motor Commutation","text":"<p>The TMC6300 relies on an electrical commutation sequence/signal to drive the motor phases to a BLDC or PMSM motor. The commutation signals for these motors are trapezoidal for BLDC motors and sinusoidal for PMSM motors.</p> <ul> <li> <p>      Trapezoidal motor commutation.      </p> </li> <li> <p>      Sinusoidal motor commutation.      </p> </li> </ul> <p> (Source: Brushless-DC Motor Driver Considerations and Selection Guide application note) </p> <p>For a trapezoidal signal, the high-side (HS) and low-side (LS) MOSFETs, can just be driven high or low. However, in order to approximate a sinusoidal signal, a progressively varying PWM signal must be provided from the microcontroller and all six signal should be in sync with each other.</p> <p></p> <p>Sinusoidal PWM signal. (Source: Demystifying BLDC motor commutation: Trap, Sine, &amp; FOC)</p> PMSM vs BLDC Motor <p>A BLDC motor (sometimes referred to as a BLDM) and a PMSM (sometimes referred to as an AC synchronus motor) for the most part will appear the same in their internal construction. The difference between these types of motors is in their stator windings. This means that their commutation (the electrical signals used to drive the motor) is different.</p> <ul> <li>In a BLDC motor, the windings are concentrated on salient poles, requiring a voltage waveform that's more trapeziodal than sinusoidal.</li> <li>In a PMSM, the windings are distributed over several poles, requiring a voltage waveform that's more more sinusoidal.</li> </ul> <p>Gimbal Motor</p> <p>Based on measuring the output from one of the coils, our gimbal motor is a PMSM and would require a sinusoidal waveform to drive the motor. It should be noted that a trapezodial waveform can probably be used; however, users may notice effects such as cogging.</p> Alternative Use Cases <p>While this IC is intended to be used to drive 3-Phase BLDC/PMSM motors, users can easily adapt their hardware and software to work with other moters. For example, users could use two half-bridges to form an H-bridge and adapt their control software to drive a brushed, DC motor.</p>"},{"location":"single_page/#io-pins","title":"I/O Pins","text":"<p>There are several I/O pins for the TMC6300. Some of the pins are detailed in the power section above; the <code>VOUT</code> pin is ommitted because it isn't broken out.</p>"},{"location":"single_page/#half-bridges","title":"Half-Bridges","text":"<p>The TMC6300 features high-side and low-side MOSFET pairs of the three available half-bridges which control the commutation of the three motor phases.</p> <p></p> <p>6 PWM control of a 3-phase motor commutation. (Source: Modified from the Block commutation vs. FOC in power tool motor control application note)</p> InputOutput <p>The electronic commutation sequence of these pins will depend on the motor that is connected. For most cases, users will provide a PWM signal to each of the pins. These are active-high pins with logic levels controlled by the <code>VIO</code> pin.</p> <p>  The six control pins (<code>UL</code>/<code>UH</code>, <code>VL</code>/<code>VH</code>, and <code>WL</code>/<code>WH</code>) for the three half-bridges of the TMC6300 motor driver.  </p> Active High <p>By pulling the pin high, the MOSFET will enable power to flow through that section of the half-bridge.</p> Microcontroller Limitations <p>Users will need to use pins capable of providing a PWM signal. In addition, for the recommended Simple FOC Arduino library, users will also need to consider the supported microcontroller as well as the configuration for the 6PWM mode.</p> <p>With the electronic commutation sequence provided to the half-bridges, the output motor phases will drive a connected motor.</p> <p>  The three motor phase outputs (<code>U</code>/<code>V</code>/<code>W</code>) from the TMC6300, used to drive a motor.  </p> Wiring Sequence <p>For a 3-phase brushless motor, the connection sequence of the wires to a BLDC motor doesn't necessarily matter; the direction that the motor spins can be controlled through the software. However, for reference, switching two of the output channels to the motor will automatically reverse the direction that the motor was spinning.</p> <ul> <li>If users swap the <code>U</code> and <code>V</code> connections, but leave the <code>W</code> connection alone, the motor will now spin in the opposite direction of the original configuration.</li> </ul>"},{"location":"single_page/#diagnostic-pin","title":"Diagnostic Pin","text":"<p>The diagnostic pin is triggered based on different faults (i.e. shorts and overtemperature) detected by the IC. By default, the status will be indicated by the, green diagnostic, <code>D</code> LED and will remail <code>LOW</code> until triggered. Once triggered, users will need to disable and reset the TMC6300 or power cycle the board.</p> <p></p> <p>The <code>DIAG</code> pin on the TMC6300 motor driver.</p> <p>Users can also monitor the <code>DIAG</code> pin, so their microcontroller knows when to reset the TMC6300 to clear the fault.</p>"},{"location":"single_page/#current-sense-pin","title":"Current Sense Pin","text":"<p>The current sense pin is the foot point of the <code>U</code> and <code>V</code> half-bridges, with a 0.12\u03a9 resistor attached. Users can measure the voltage across the <code>SENSE</code> and <code>GND</code> pins to determine the current flowing to the motor; however, it is recommended that an op-amp be attached to amplify the signal.</p> <p></p> <p>The <code>SEN</code> pin on the TMC6300 motor driver.</p>"},{"location":"single_page/#leds","title":"LEDs","text":"<p>There are three status indicator LEDs on the TMC6300 motor driver:</p> <ul> <li><code>V</code> - Power (Red)<ul> <li>Turns on once power is supplies to the <code>VIN</code> pin</li> </ul> </li> <li><code>D</code> - Diagnostics (Green)<ul> <li>Turns on to indicate a fault (see diagnostic pin section)</li> </ul> </li> <li><code>S</code> - Standby (Blue)<ul> <li>Turns on when the motor driver is enabled</li> <li>Turns off, when the IC has been reset and the motor driver is in standby mode</li> </ul> </li> </ul> <p></p> <p>The status indicator LEDs on the TMC6300 motor driver.</p>"},{"location":"single_page/#heat-sink-pad","title":"Heat Sink Pad","text":"<p>A 0.13\" x 0.14\" platted copper pad is provided on the top of the board, where users can add a heat sink to dissipate excess heat generated by the TMC6300. The pad can accommodate the small heatsink in our catalog.</p> Thermal Shutdown Temperature <p>The AP329A has a 160\u00b0C (320\u00b0F) thermal shutdown temperature. The TMC6300 will restart automatically when the junction temperature decreases to +130\u00b0C.</p> Copper Heat Sink <p>Users may be tempted to use our copper heatsink on their board. However, we highly advise against using the copper heatsink because it barely fits and will likely cause a short across one of the pins.</p> <p>  Copper heatsink not fitting on the TMC6300 motor driver.  </p> <p></p> <p>Heat sink pad on the top of the TMC6300 motor driver.</p>"},{"location":"single_page/#jumpers","title":"Jumpers","text":"Never modified a jumper before? <p>Check out our Jumper Pads and PCB Traces tutorial for a quick introduction! <p> How to Work with Jumper Pads and PCB Traces </p></p> <p>There are three jumpers on the back of the board that can be used to easily modify a hardware connections on the board.</p> <ul> <li>V - This jumper can be used to remove power from the red, power LED.</li> <li>S - This jumper can be used to remove power from the blue, standby LED.</li> <li>D - This jumper can be used to remove power from the green, diagnostic LED.</li> </ul> <p></p> <p>The LED jumpers on the back of the TMC6300 motor driver.</p>"},{"location":"single_page/#hardware-assembly","title":"Hardware Assembly","text":""},{"location":"single_page/#tmc6300-motor-driver","title":"TMC6300 Motor Driver","text":""},{"location":"single_page/#headers","title":"Headers","text":"New to soldering? <p>If you have never soldered before or need a quick refresher, check out our How to Solder: Through-Hole Soldering guide. <p> How to Solder: Through-Hole Soldering </p></p> <p>The pins on the SparkFun TMC6300 motor driver are broken out to 0.1\"-spaced pins on the outer edges of the board. When selecting headers, be sure you are aware of the functionality and board orientation required.</p> <p></p> <p>Soldering headers to the TMC6300 motor driver.</p> <p>Tip</p> <p>Please be aware that the side of the board with the silkscreen labeld for the pins and the heat sink pad is, technically the top side of the board when in use.</p> <ul> <li> <p>      Top side of the TMC6300 motor driver.      </p> </li> <li> <p>      Bottom side of the TMC6300 motor driver.      </p> </li> </ul> <p>Staggered PTH Pins</p> <p>The pins on the board may appear to be offset or crooked; this is by design, we stagger the holes along a specific center alignment. This reduces the geometric tolerance between the holes and header pins along a single axis, which helps to hold the header in place and keeps the pins more orthogonal to the board when soldering.</p>"},{"location":"single_page/#heat-sink","title":"Heat Sink","text":"<p>Tip</p> <p>With larger heat sinks, we recommend a test fit and attaching it last to avoid conflicts with other parts of the board. For example, the heat sink could block the PTH pins/slots or access to the jumper pad.</p> <p>Copper Heat Sink</p> <p>Users may be tempted to use our copper heatsink on their board. However, we highly advise against using the copper heat sink because it barely fits and will likely cause a short across one of the pins.</p> <ul> <li> <p>      Different heat sinks next to the TMC6300 motor driver.      </p> </li> <li> <p>      Copper heat sink not fitting on the TMC6300 motor driver.      </p> </li> </ul> <p> Different heat sinks next to the TMC6300 motor driver. Copper heat sink not fitting on the TMC6300 motor driver. </p> <p>To attach a heat sink to the board, users will also need a piece of thermal tape. We recommend the following procedure:</p> <ol> <li> <p>Cut out a piece of thermal tape to fit the bottom of the heat sink.</p> <p>Tip</p> <p>Covering the entire bottom of the heat sink can insulate the electrical contacts on the board from shorting.</p> <ul> <li>For a perfect fit, users can place the heat sink over the tape and trace the outline to cut with scissors.</li> <li>For a perfect fit, users can also place the heat sink over the tape and cut the outline with a hobby knife.</li> </ul> <p>  Cutting the thermal tape to fit the heat sink.  </p> </li> <li> <p>Place the piece of thermal tape on the bottom of the heat sink.</p> <p>Tip</p> <p>We recommend peeling off just one side of the backing sheet or release liner to place the thermal tape on the heat sink. Users can then peel the other side off when they are ready to place the heat sink on their board.</p> </li> <li> <p>Attach the heat sink to the board.</p> <ul> <li>Make sure to make any jumper modifications and/or solder any connections before placing the heat sink on the board.</li> <li>Make sure to avoid any electrical contact with the sides of the heat sink.</li> </ul> <p> Heat sink attached to the TMC6300 motor driver.  </p> </li> </ol>"},{"location":"single_page/#bldc-gimbal-motor","title":"BLDC Gimbal Motor","text":"<p>Advanced Skills Required</p> <p>To connect the gimbal motor to the TMC6300 motor driver board, some advanced soldering and wire stripping skills are necessary. The wire leads from the motor are only about 2\" long, which is not a lot to work with. Users may only have two attempts at stripping the wires before they run out the available wire length.</p> New to soldering? <p>If you have never soldered before or need a quick refresher, check out our How to Solder: Through-Hole Soldering guide. <p> How to Solder: Through-Hole Soldering </p></p> <p>To connect the gimbal motor to the TMC6300 motor driver, users will need to expose the wiring. First, remove the JST connector and make sure to cut as close to the plastic housing as possible.</p> <p></p> <p>Cut off the plastic JST connector on the motor's wire leads.</p> Alternative Connections <p>If users are utilize the alligator or IC hook pigtails, they may be able to crack the plastic housing of the connector to expose the crimped wire terminals.</p> <p>Next, with as much care as possible, strip off some of the electrical insulation of each of the leads. On our wire strippers, the 26AWG notch worked the best.</p> <p></p> <p>Strip off some of the insulation from the motor's wire leads.</p> <p>The last step is to twist and tin the wires, so that they can be inserted into some jumper wires. Make sure to keep the ends straight and avoid adding to much solder, so that the wire ends can still fit into the female jumper wire terminals.</p> <p> Twist and tin the exposed wire leads, so that they can be inserted into the female end of a jumper wire. The leads should be straight and clear of bulges fit the into female terminals. <p></p> <ul> <li> <p>      Twist and tin the exposed wire leads, so that they can be inserted into the femal end of a jumper wire.      </p> </li> <li> <p>      The leads should be straight and clear of bulges fit the female terminals of the jumper wire.      </p> </li> </ul>"},{"location":"single_page/#assembly-for-examples","title":"Assembly for Examples","text":"<p>The following instructions are for wiring up the RedBoard Plus, TMC6300 motor driver, and motor for the examples provided in this tutorial. </p>"},{"location":"single_page/#redboard-plus-to-tmc6300","title":"RedBoard Plus to TMC6300","text":"<p>For ease of use, connect the TMC6300 motor driver with headers attached to the center of breadboard. The pin layout should perfectly align, so that users will have three breadboard pins available on each side of the TMC6300 breakout board. Then, following the table below, connect the pins from the RedBoard Plus to breadboard pins associated with the motor driver.</p> <p> RedBoard <code>3</code> <code>5</code> <code>6</code> <code>9</code> <code>10</code> <code>11</code> <code>12</code> <code>GND</code> Motor Driver <code>UL</code> <code>WL</code> <code>WH</code> <code>VL</code> <code>VH</code> <code>UH</code> <code>VIO</code> <code>GND</code> <p></p> <p></p> <p>A graphical representation of the connections between the RedBoard Plus and a breadboard with the TMC6300 motor driver attached.</p> <p>Timer Pins</p> <p>As mentioned in the Simple FOC library documentation, </p>"},{"location":"single_page/#arduino-uno-support","title":"Arduino UNO support","text":"<p>Arduino UNO and all the atmega328 based boards have only 6 PWM pins and in order to use the <code>BLDCDrievr6PWM</code> we need to use all of them. Those are <code>3</code>,<code>5</code>,<code>6</code>,<code>9</code>,<code>10</code> and <code>11</code>.  Furthermore in order for the algorithm to work well we need to use the PWM pins that belong to the same timer for each high/low side pair of each phase. So Atmega328 pins belonging to the timers are:</p> <code>TIM0</code> <code>TIM1</code> <code>TIM2</code> <code>5</code>,<code>6</code> <code>9</code>,<code>10</code> <code>3</code>,<code>11</code> <p>Therefore it is important that <code>phA_h</code> and <code>phA_l</code> belong to one timer, <code>phB_h</code> and <code>phB_l</code> to second timer and <code>phC_h</code> and <code>phC_l</code> to the last timer. If we decide that phase <code>A</code> belongs to the timer <code>TIM0</code> we can set <code>phA_h</code> either to pin <code>5</code> or pin <code>6</code>.  </p>"},{"location":"single_page/#motor-to-tmc6300","title":"Motor to TMC6300","text":"<p>Connecting a motor to the TMC6300 motor driver straight forward. Users, just need to connect the half-bridge drive channels with the ends of the motor's stator coils.</p> <ul> <li>Utilizing two half-bridges to drive a brushed DC motor with a full H-bridge</li> <li>Utilizing three half-bridges to drive a brushless DC motor</li> </ul>"},{"location":"single_page/#bldc-gimbal-motor_1","title":"BLDC Gimbal Motor","text":"<p>Connecting a 3-phase, BLDC motor to the motor driver is relatively simple as the sequence of the wires connection doesn't matter. Using jumper wires, connect the prepared ends of the gimbal stabilizer motor to the <code>U</code>, <code>V</code>, and <code>W</code> pins of the TMC6300 breakout board.</p> <p></p> <p>A prepared end of the gimbal motor being inserted into the female terminals of a jumper wire.</p> <p>Tip</p> <p>Users may want to prop up the base of the gimbal motor, as the magnetic end of the motor shaft protudes below its base plate. Users can see a demonstration in the video below:</p> <p>  Video with Gimbal Motor  </p> Reversing the Rotation of the Motor <p>For a 3-phase brushless motor, the connection sequence of the wires to a BLDC motor doesn't necessarily matter; the direction that the motor spins can be controlled through the software. However, for reference, switching two of the output channels to the motor will automatically reverse the direction that the motor was spinning.</p> <ul> <li>If users swap just the <code>U</code> and <code>V</code> connections, leaving the <code>W</code> connection alone, the motor will now spin in the opposite direction of the original configuration.</li> </ul>"},{"location":"single_page/#dc-hobby-motor","title":"DC Hobby Motor","text":"<p>If this was a H-bridge motor driver, the connections to the motor wouldn't matter. However, as there are three half-bridges, users will need to note which half-bridges the DC motor is connected to. These connections will dictate how the motor is driven by the software. For the example, connect the motor to the <code>V</code> and <code>W</code> output channels of the TMC6300 motor driver.</p> Reversing the Rotation of the Motor <p>For a  single phase DC motor, the direction that the motor spins can be controlled through the software. However, for reference, switching the polarity of the motor's wires will also reverse the direction that the motor was spinning.</p>"},{"location":"single_page/#powering-the-tmc6300","title":"Powering the TMC6300","text":"<p>Enough power should be provided to the TMC6300 to drive the motor connected to it. Therefore, the drive current and voltage range of the motor should be taken into consideration. Additionally, users should monitor the drive current to prevent overheating of the TMC6300 motor driver.</p> <p>Ideally, if users have access to a variable power supply, it would be the most convenient solution for adjusting the voltage and source current parameters. Other power supply alternatives include a 6V (4xAA) battery pack or dual-cell LiPo battery. However, if users are unable to find a suitable power source, we have found that the 5V power output from the RedBoard Plus is sufficient to drive the gimbal motor, under a no load condition at low speeds.</p> <p> RedBoard <code>5V</code> <code>GND</code> Motor Driver <code>VIN</code> <code>GND</code> <p></p> <p></p> <p>A graphical representation of the connections between the RedBoard Plus and a breadboard with the TMC6300 motor driver attached.</p> Current Monitoring <p>For the examples in this tutorial, the motor will be driven with a no-load condition and the motor drive current shouldn't need to be monitored. (An exception would be when the motor is hindered from spinning, in which case the torque and drive current will spike.)</p>"},{"location":"single_page/#software-overview","title":"Software Overview","text":""},{"location":"single_page/#arduino-ide","title":"Arduino IDE","text":"<p>Tip</p> <p>For first-time users, who have never programmed before and are looking to use the Arduino IDE, we recommend beginning with the SparkFun Inventor's Kit (SIK), which is designed to help users get started programming with the Arduino IDE.</p> <p>Most users may already be familiar with the Arduino IDE and its use. However, for those of you who have never heard the name Arduino before, feel free to check out the Arduino website. To get started with using the Arduino IDE, check out our tutorials below:</p> What is an Arduino? Installing Arduino IDE Installing an Arduino Library Installing Board Definitions in the Arduino IDE <ul> <li> <p> <p>What is an Arduino?</p> <li> <p> <p>Installing the Arduino IDE</p> <li> <p> <p>Installing an Arduino Library</p> <li> <p> <p>Installing Board Definitions in the Arduino IDE</p> Need help setting up the RedBoard Plus?"},{"location":"single_page/#redboard-plus","title":"RedBoard Plus","text":"<p>The following instructions should help users get started with the RedBoard Plus. For more information about the board, please check out our hookup guide below:</p> <p> RedBoard Plus Hookup Guide </p>"},{"location":"single_page/#ch340-driver","title":"CH340 Driver","text":"<p>Users will need to install the appropriate driver for their computer to recognize the serial-to-UART chip on their board/adapter. Most of the latest operating systems will recognize the CH340C chip on the board and automatically install the required driver.</p> <p>To manually install the CH340 driver on their computer, users can download it from the WCH website. For more information, check out our How to Install CH340 Drivers Tutorial.</p> <p> How to Install CH340 Drivers </p>"},{"location":"single_page/#arduino-ide_1","title":"Arduino IDE","text":"<p>When selecting a board to program in the Arduino IDE, users should select the Arduino Uno from the Tools drop-down menu (_i.e. Tools &gt; Board &gt; Arduino AVR Boards &gt; Arduino Uno).</p> <p> Select the Arduino Uno from the Tools drop-down menu in the Arduino IDE. </p> Arduino IDE 2.x.x - Alternative Method <p>In the newest version of the Arduino IDE 2.<code>x</code>.<code>x</code>, users can also select their board (green) and port (blue) from the <code>Select Board &amp; Port</code> dropdown menu (yellow).</p> <p> Selecting the Arduino Uno and COM5 port from the Select Board &amp; Port drop-down menu in the Arduino IDE (v2.0.3). </p>"},{"location":"single_page/#simplefoclibrary","title":"SimpleFOClibrary","text":"<p>The Simple Field Oriented Control Library can be installed from the library manager in the Arduino IDE.</p> <p></p> <p>SimpleFOClibrary in the library manager of the Arduino IDE.</p> Arduino IDE (v1.x.x) <p>In the Arduino IDE v1.x.x, the library manager will have the following appearance for the SimpleFOC library:</p> <p> SimpleFOClibrary in the library manager of the Arduino IDE (v1.x.x). </p> <p>This library utilizes a motor control scheme called field oriented control (FOC), which can utilize a feedback control loop to drive a motor with a higher power efficiency and precision characteristics, like evenly distributed torque control.</p> <p>Info</p> <p>For more details about the library, check out the online documentation.</p> <p>Supported Hardware</p> <p>For a detailed and up-to-date list of the hardware supported by this library, check out the library's documentation. The following are excerpts taken from the library's documentation page:</p> MicrocontrollersMotor DriversMotors <p>Arduino SimpleFOClibrary supports:</p> MCU 2 PWM mode 4 PWM mode 3 PWM mode 6 PWM mode pwm frequency config Arduino (8-bit) \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f (either 4kHz or 32kHz) Arduino DUE \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c \u2714\ufe0f stm32 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f esp32 MCPWM \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f esp32 LEDC \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c \u2714\ufe0f esp8266 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c \u2714\ufe0f samd21/51 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f teensy \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Raspberry Pi Pico \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Portenta H7 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c \u2714\ufe0f nRF52 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f <p>From this table you can see that if you need the 6 PWM mode for your application you should avoid using Teensy and Arduino DUE boards for now.</p> <p>Info</p> <p>For more details, please refer to the SimpleFOC Arduino library documentation.</p> <p>Arduino SimpleFOClibrary has a goal to support as many BLDC and stepper motor drivers as possible. Till this moment there are two kinds of motor drivers supported by this library:</p> <ul> <li>BLDC motor driver <ul> <li>3 PWM signals ( 3 phase )</li> <li>6 PWM signals ( 3 phase )</li> </ul> </li> </ul> Current Limitations <p>Before running any BLDC motor with the SimpleFOClibrary please make sure your hardware can handle the currents your motor requires. </p> <p>The simplest way to do it is by checking the motor phase resistance <code>R</code>. Either check the datasheet of your motor and search for the resistance value or measure it yourself using a multimeter. Then check the value of your power supply voltage <code>V_dc</code> and once when you have the values you can find the maximum current <code>I_max</code> value by calculating: <pre><code>I_max = V_dc/R\n</code></pre> Finally check the value of the maximum current <code>I_max</code> with the datasheet of your driver board. If the <code>I_max</code> is too high you can lower the power supply voltage <code>V_dc</code> in order prevent too high peaks of the current. If you are not able to change your power supply voltage you can limit the voltage set to motor in software.   <p>NOTE</p>     The equation above calculates the worst case maximum current <code>I_max</code> and in most cases calculated <code>I_max</code> is higher than the actual value. Maximum current depends both of the motor hardware such as winding configuration and the control algorithm. </p> <p>Tip</p> <p>While the TMC6300 isn't directly listed as part of the supported hardware for the SimpleFOC Arduino library, we have verified that is compatible with the library.</p> <p>Info</p> <p>For more details, please refer to the SimpleFOC Arduino library documentation.</p> <p>Arduino SimpleFOClibrary supports two types of BLDC motors:</p> <ul> <li> <p>BLDC motors</p> <ul> <li> <p>3 phase (3 wire):</p> Gimbal Motors <p>Gimbal motors will work basically with any BLDC motor driver, but since the high-performance drivers have current measurement circuits optimized for high currents you will not have any benefit of using them. Therefore low-power BLDC motor drivers will have comparable performance as the expensive high-power, high-performance drivers for gimbal motors. What is in my opinion very cool! \ud83d\ude03 This was one of the main motivations to start developing  SimpleFOCShield.</p> <p>Some of the characteristics of Gimbal motors are:</p> <ul> <li>High torque on low velocities</li> <li>Very smooth operation</li> <li>Internal resistance &gt;10\u03a9</li> <li>Currents up to 5A</li> </ul> <p>Gimbal motors are very versatile and their main benefit is very smooth operation on low speeds and high torque. They can be used in may different applications everywhere from being a high-quality replacement for your stepper motor or DC servo motor to very smooth camera gimbals and many different robotics applications. One of very interesting use cases are student experiments, where BLDC motors provide a very high degree of control and dynamics, such examples are ball and plate,  inverted pendulums, balancing robots and similar. </p> High-performance Motors <p>Gimbal motors are just a subset of all the BLDC motors there is. As suggested in previous chapters, when using high-torque ( currents &gt; 5A), low-resistance (~1\u03a9) BLDC motors such as drone motors make sure your BLDC driver can support the currents necessary. SimpleFOClibrary has been tested with several high performance BLDC drivers (supported BLDC drivers list). </p> </li> </ul> </li> <li> <p>Stepper motors</p> <ul> <li>2 phase (4 wire)</li> </ul> </li> </ul> Current Limitations <p>Before running any BLDC motor with the SimpleFOClibrary please make sure your hardware can handle the currents your motor requires. </p> <p>The simplest way to do it is by checking the motor phase resistance <code>R</code>. Either check the datasheet of your motor and search for the resistance value or measure it yourself using a multimeter. Then check the value of your power supply voltage <code>V_dc</code> and once when you have the values you can find the maximum current <code>I_max</code> value by calculating: <pre><code>I_max = V_dc/R\n</code></pre> Finally check the value of the maximum current <code>I_max</code> with the datasheet of your driver board. If the <code>I_max</code> is too high you can lower the power supply voltage <code>V_dc</code> in order prevent too high peaks of the current. If you are not able to change your power supply voltage you can limit the voltage set to motor in software.   <p>NOTE</p>     The equation above calculates the worst case maximum current <code>I_max</code> and in most cases calculated <code>I_max</code> is higher than the actual value. Maximum current depends both of the motor hardware such as winding configuration and the control algorithm. </p> <p>Info</p> <p>For more details, please refer to the SimpleFOC Arduino library documentation.</p>"},{"location":"single_page/#6pwm-motor-driver","title":"6PWM Motor Driver","text":"<p>Users will need to utilize the <code>BLDCDriver6PWM</code> class to provide the six PWM signals required for the TMC6300 motor driver.</p> <code>BLDCDriver6PWM</code> <p>This class provides an abstraction layer for most of the common BLDC drivers, which require six PWM signals. This method offers more control than a three PWM motor drivers, since each of the 6 half-bridges MOSFETs can be controlled independently.</p> <p>To create the interface to the BLDC driver you need to specify the 6 <code>PWM</code> pin numbers for each motor phase and optionally <code>enable</code> pin. <pre><code>//  BLDCDriver6PWM( int phA_h, int phA_l, int phB_h, int phB_l, int phC_h, int phC_l, int en)\n//  - phA_h, phA_l - A phase pwm pin high/low pair \n//  - phB_h, phB_l - B phase pwm pin high/low pair\n//  - phB_h, phC_l - C phase pwm pin high/low pair\n//  - enable pin    - (optional input)\nBLDCDriver6PWM motor = BLDCDriver6PWM(5,6, 9,10, 3,11, 8);\n</code></pre></p> <p>Microcontroller Considerations</p> Arduino UnoSTM32ESP32 <p>Arduino UNO and all the atmega328 based boards have only 6 PWM pins and in order to use the <code>BLDCDrievr6PWM</code> we need to use all of them. Those are <code>3</code>,<code>5</code>,<code>6</code>,<code>9</code>,<code>10</code> and <code>11</code>.  Furthermore in order for the algorithm to work well we need to use the PWM pins that belong to the same timer for each high/low side pair of each phase. So Atmega328 pins belonging to the timers are:</p> <code>TIM0</code> <code>TIM1</code> <code>TIM2</code> <code>5</code>,<code>6</code> <code>9</code>,<code>10</code> <code>3</code>,<code>11</code> <p>Therefore it is important that <code>phA_h</code> and <code>phA_l</code> belong to one timer, <code>phB_h</code> and <code>phB_l</code> to second timer and <code>phC_h</code> and <code>phC_l</code> to the last timer. If we decide that phase <code>A</code> belongs to the timer <code>TIM0</code> we can set <code>phA_h</code> either to pin <code>5</code> or pin <code>6</code>. </p> <p>Stm32 boards have two possible 6 PWM modes:</p> <ul> <li>Hardware 6 PWM mode</li> <li>Software 6 PWM mode</li> </ul> <ul> <li> <p>Hardware PWM</p> <p>In hardware 6 PWM mode the user uses only one timer, usually Timer 1 for all the 6 PWM channels. Stm32 boards usually have at least one timer which has automatic complementary channels which avoids the need for a complicated channel inverting configuration. SimpleFOClibrary automatically enables this control mode if you provide the pins that support this interface to the constructor of the <code>BLDCDriver6PWM</code> class. For example, both STM32 Bluepill and STM32 Nucleo boards have this interface supported by pins:</p> <code>T1C1</code> <code>T1C2</code> <code>T1C3</code> <code>T1C1N</code> <code>T1C2N</code> <code>T1C3N</code> <code>PA8</code> <code>PA9</code> <code>PA10</code> <code>PB13</code> <code>PB14</code> <code>PB15</code> <p>Where <code>T1Cx</code> are the Timer 1 channels and <code>T1CxN</code> are their complementary channels (inverted channels). Each pair of <code>T1Cx</code> and <code>T1CxN</code> is used for one pair of the high/low PWM pins. The library will configure the necessary timers and registers if you provide these pins to the constrictor of the <code>BLDCDriver6PWM</code> class. For example: <pre><code>//  BLDCDriver6PWM( int phA_h, int phA_l, int phB_h, int phB_l, int phC_h, int phC_l, int en)\nBLDCDriver6PWM motor = BLDCDriver6PWM(PA8, PB13, PA9, PB14, PA10, PB15);\n</code></pre></p> </li> <li> <p>Software PWM</p> <p>If it is not possible to use the hardware 6 PWM mode with your board  SimpleFOClibrary enables you to use any two channels of any of the timers as your high/low side PWM pair. Basically, the library will automatically configure the complementary channels on the provided low side pins. The only requirement for this code to work properly is exatcly the same as for the Arudino UNO, each phase high/low PWM pair needs to belong to the same timer.  For example, if we take STM32 Nucleo F401RE board we can take for example: <pre><code>//  BLDCDriver6PWM( int phA_h, int phA_l, int phB_h, int phB_l, int phC_h, int phC_l, int en)\nBLDCDriver6PWM motor = BLDCDriver6PWM(7, 2, 6, 3, 5, 4);\n</code></pre> Where</p> <code>T1C1</code> <code>T1C3</code> <code>T2C3</code> <code>T2C2</code> <code>T3C1</code> <code>T3C2</code> <code>7</code> <code>2</code> <code>6</code> <code>3</code> <code>5</code> <code>4</code> <p>On Bluepill we could use: <pre><code>//  BLDCDriver6PWM( int phA_h, int phA_l, int phB_h, int phB_l, int phC_h, int phC_l, int en)\nBLDCDriver6PWM motor = BLDCDriver6PWM(PA8, PA9, PB6, PB7, PB8, PB9);\n</code></pre> Where</p> <code>T1C1</code> <code>T1C2</code> <code>T4C1</code> <code>T4C2</code> <code>T4C3</code> <code>T4C4</code> <code>PA8</code> <code>PA9</code> <code>PB6</code> <code>PB7</code> <code>PB8</code> <code>PB9</code> </li> </ul> <p>ESP32 boards support <code>MCPWM</code> interface that is intended for this kind of applications. Each ESP32 board has two of the <code>MCPWM</code> channels and can support two 6 PWM drivers. There is no pin specific requirements for the ESP32, each pin can be used in PWM mode. But please make sure not to use the pins that have predefined states on boot because this could result malfunction. You can find this information online easily, here is a YouTube video with more details. </p> <p>Info</p> <p>For more details about the <code>BLDCDriver6PWM</code> class, check out the online documentation.</p>"},{"location":"single_page/#bldc-motor","title":"BLDC Motor","text":"<p>All BLDC motors are handled with the <code>BLDCMotor</code> class.</p> <code>BLDCMotor</code> <p>This class implements the BLDC FOC algorithm, motion control loops, and monitoring.</p> <p>To instantiate the BLDC motor we need to create an instance of the <code>BLDCMotor</code> class and provide it the number of <code>pole pairs</code> of the motor. <pre><code>//  BLDCMotor(int pp, (optional R, KV))\n//  - pp  - pole pair number\n//  - R   - phase resistance value - optional\n//  - KV  - motor KV rating [rpm/V] - optional\nBLDCMotor motor = BLDCMotor(11, 10.5, 120);\n</code></pre></p> <p>Motor Considerations</p> <p>While, the datasheet for our gimbal motor, indicates that there are 8 pole pairs, we have found that the motor operates more smoothly if the <code>BLDCMotor</code> class is instantiated with 7 pole pairs instead.</p> <pre><code>BLDCMotor motor = BLDCMotor(7);\n</code></pre> <p>Info</p> <p>For more details about the <code>BLDCMotor</code> class, check out the online documentation.</p>"},{"location":"single_page/#motion-control","title":"Motion Control","text":"<p>Unless a feedback loop is incorporated when driving the motor (i.e. with position sensors or current sensing), users should implement the SimpleFOC library using the open-loop control.</p> <p>Open-Loop Motion Control Types:</p> <ul> <li>Velocity</li> <li>Position</li> </ul>"},{"location":"single_page/#bldc-example","title":"BLDC Example","text":""},{"location":"single_page/#hardware-assembly_1","title":"Hardware Assembly","text":"<p>Users should already have followed the instructions from the component assembly and example setups sections to setup their hardware for this example.</p> <p></p> <p>A graphical representation of the connections between the RedBoard Plus and a breadboard with the TMC6300 motor driver attached.</p>"},{"location":"single_page/#redboard-plus-to-tmc6300_1","title":"RedBoard Plus to TMC6300","text":"<p>Connect the following pins from the RedBoard Plus to the TMC6300.</p> <p> RedBoard <code>3</code> <code>5</code> <code>6</code> <code>9</code> <code>10</code> <code>11</code> <code>12</code> <code>GND</code> Motor Driver <code>UL</code> <code>WL</code> <code>WH</code> <code>VL</code> <code>VH</code> <code>UH</code> <code>VIO</code> <code>GND</code> <p></p> <p></p> <p>A graphical representation of the connections between the RedBoard Plus and a breadboard with the TMC6300 motor driver attached.</p>"},{"location":"single_page/#connecting-the-gimbal-motor","title":"Connecting the Gimbal Motor","text":"<p>Connecting a 3-phase, BLDC motor to the motor driver is relatively simple as the sequence of the wires connection doesn't matter. Using jumper wires, connect the prepared ends of the gimbal stabilizer motor to the <code>U</code>, <code>V</code>, and <code>W</code> pins of the TMC6300 breakout board.</p> <p></p> <p>A prepared end of the gimbal motor being inserted into the female terminals of a jumper wire.</p>"},{"location":"single_page/#powering-the-tmc6300_1","title":"Powering the TMC6300","text":"<p>If users are unable to find a suitable power source, we have found that the 5V power output from the RedBoard Plus is sufficient to drive the gimbal motor, under a no load condition at low speeds.</p> <p> RedBoard <code>5V</code> <code>GND</code> Motor Driver <code>VIN</code> <code>GND</code> <p></p> <p></p> <p>A graphical representation of the connections between the RedBoard Plus and a breadboard with the TMC6300 motor driver attached.</p>"},{"location":"single_page/#example-code","title":"Example Code","text":"<p>After installing and setting up the Arduino IDE and the Simple FOC Arduino library, users will need to upload the following example code to the RedBoard Plus. This code can be copied or downloaded below:</p> <p>  Download <code>BLDC.ino</code> Example Code </p> <p>Example Code</p> BLDC.ino<pre><code>    // Open loop motor control example\n#include &lt;SimpleFOC.h&gt;\n// BLDC motor &amp; driver instance\n// BLDCMotor motor = BLDCMotor(pole pair number);\nBLDCMotor motor = BLDCMotor(7);\n// BLDCDriver3PWM driver = BLDCDriver3PWM(pwmA, pwmB, pwmC, Enable(optional));\nBLDCDriver6PWM driver = BLDCDriver6PWM(5, 6, 9,10, 3, 11);\n// Stepper motor &amp; driver instance\n//StepperMotor motor = StepperMotor(50);\n//StepperDriver4PWM driver = StepperDriver4PWM(9, 5, 10, 6,  8);\n//target variable\nfloat target_velocity = 6;\n// // instantiate the commander\nCommander command = Commander(Serial);\n// void doTarget(char* cmd) { command.scalar(&amp;target_velocity, cmd); }\n// void doLimit(char* cmd) { command.scalar(&amp;motor.voltage_limit, cmd); }\nvoid setup() {\n// driver config\n// power supply voltage [V]\ndriver.voltage_power_supply = 5;\n// limit the maximal dc voltage the driver can set\n// as a protection measure for the low-resistance motors\n// this value is fixed on startup\ndriver.voltage_limit = 5;\n// pwm frequency to be used [Hz]\n// for atmega328 fixed to 32kHz\n// esp32/stm32/teensy configurable\ndriver.pwm_frequency = 32000;\ndriver.init();\n// link the motor and the driver\nmotor.linkDriver(&amp;driver);\n// limiting motor movements\n// limit the voltage to be set to the motor\n// start very low for high resistance motors\n// current = voltage / resistance, so try to be well under 1Amp\nmotor.voltage_limit = 3;   // [V]\n// open loop control config\nmotor.controller = MotionControlType::velocity_openloop;\n// init motor hardware\nmotor.init();\n// add target command T\n// command.add('T', doTarget, \"target velocity\");\n// command.add('L', doLimit, \"voltage limit\");\nSerial.begin(115200);\nSerial.println(\"Motor ready!\");\nSerial.println(\"Set target velocity [rad/s]\");\n_delay(1000);\n}\nvoid loop() {\n// open loop velocity movement\n// using motor.voltage_limit and motor.velocity_limit\nmotor.move(target_velocity);\n// user communication\ncommand.run();\n}\n</code></pre>"},{"location":"single_page/#running-the-motor","title":"Running the Motor","text":"<p>Be default, the motor should spin automatically. However, if users wish to control the speed of the motor, they can uncomment lines 21-22 and 56-57 of code and reprogram the RedBoard Plus.</p> Code Changes Highlighted <p>Uncomment the following lines of code (21-22 and 56-57):</p> BLDC.ino<pre><code>    // Open loop motor control example\n#include &lt;SimpleFOC.h&gt;\n// BLDC motor &amp; driver instance\n// BLDCMotor motor = BLDCMotor(pole pair number);\nBLDCMotor motor = BLDCMotor(7);\n// BLDCDriver3PWM driver = BLDCDriver3PWM(pwmA, pwmB, pwmC, Enable(optional));\nBLDCDriver6PWM driver = BLDCDriver6PWM(5, 6, 9,10, 3, 11);\n// Stepper motor &amp; driver instance\n//StepperMotor motor = StepperMotor(50);\n//StepperDriver4PWM driver = StepperDriver4PWM(9, 5, 10, 6,  8);\n//target variable\nfloat target_velocity = 6;\n// // instantiate the commander\nCommander command = Commander(Serial);\n// void doTarget(char* cmd) { command.scalar(&amp;target_velocity, cmd); }\n// void doLimit(char* cmd) { command.scalar(&amp;motor.voltage_limit, cmd); }\nvoid setup() {\n// driver config\n// power supply voltage [V]\ndriver.voltage_power_supply = 5;\n// limit the maximal dc voltage the driver can set\n// as a protection measure for the low-resistance motors\n// this value is fixed on startup\ndriver.voltage_limit = 5;\n// pwm frequency to be used [Hz]\n// for atmega328 fixed to 32kHz\n// esp32/stm32/teensy configurable\ndriver.pwm_frequency = 32000;\ndriver.init();\n// link the motor and the driver\nmotor.linkDriver(&amp;driver);\n// limiting motor movements\n// limit the voltage to be set to the motor\n// start very low for high resistance motors\n// current = voltage / resistance, so try to be well under 1Amp\nmotor.voltage_limit = 3;   // [V]\n// open loop control config\nmotor.controller = MotionControlType::velocity_openloop;\n// init motor hardware\nmotor.init();\n// add target command T\n// command.add('T', doTarget, \"target velocity\");\n// command.add('L', doLimit, \"voltage limit\");\nSerial.begin(115200);\nSerial.println(\"Motor ready!\");\nSerial.println(\"Set target velocity [rad/s]\");\n_delay(1000);\n}\nvoid loop() {\n// open loop velocity movement\n// using motor.voltage_limit and motor.velocity_limit\nmotor.move(target_velocity);\n// user communication\ncommand.run();\n}\n</code></pre> <p>In order to drive the motor, users will need to access the serial monitor and provide the commands necessary to drive the motor. A full list of the available commands can be found in the Simple FOC Arduino library documentation. However, only the <code>T</code> and <code>L</code> commands are enabled in the example code.</p> <ul> <li>Sending a <code>T</code> command will set the target motor velocity in rads/s<ul> <li>Example - Entering <code>T6</code> into the serial monitor, will set the target motor velocity to 6 radians/s.</li> </ul> </li> <li>Sending a <code>L</code> command will set the voltage limit of the motor driver and in turn, the current limit (voltage_limit / motor_resistance)<ul> <li>Example - Entering <code>L5</code> into the serial monitor, will set the voltage limit to 5V and the current limit to .5A (5V/10\u03a9).</li> </ul> </li> </ul> <p>Baud Rate</p> <p>THe serial monitor baud rate should be configured to 115200bps.</p>"},{"location":"single_page/#dc-motor-example","title":"DC Motor Example","text":""},{"location":"single_page/#hardware-assembly_2","title":"Hardware Assembly","text":"<p>Users should already have followed the instructions from the component assembly and example setups sections to setup their hardware for this example.</p> <p></p> <p>A graphical representation of the connections between the RedBoard Plus and a breadboard with the TMC6300 motor driver attached.</p>"},{"location":"single_page/#redboard-plus-to-tmc6300_2","title":"RedBoard Plus to TMC6300","text":"<p>Connect the following pins from the RedBoard Plus to the TMC6300.</p> <p> RedBoard <code>3</code> <code>5</code> <code>6</code> <code>9</code> <code>10</code> <code>11</code> <code>12</code> <code>GND</code> Motor Driver <code>UL</code> <code>WL</code> <code>WH</code> <code>VL</code> <code>VH</code> <code>UH</code> <code>VIO</code> <code>GND</code> <p></p> <p></p> <p>A graphical representation of the connections between the RedBoard Plus and a breadboard with the TMC6300 motor driver attached.</p>"},{"location":"single_page/#connecting-the-dc-motor","title":"Connecting the DC Motor","text":"<p>If this was a H-bridge motor driver, the connections to the motor wouldn't matter. However, as there are three half-bridges, users will need to note which half-bridges the DC motor is connected to. These connections will dictate how the motor is driven by the software. For the example, connect the motor to the <code>V</code> and <code>W</code> output channels of the TMC6300 motor driver.</p>"},{"location":"single_page/#powering-the-tmc6300_2","title":"Powering the TMC6300","text":"<p>If users are unable to find a suitable power source, we have found that the 5V power output from the RedBoard Plus is sufficient to drive the gimbal motor, under a no load condition at low speeds.</p> <p> RedBoard <code>5V</code> <code>GND</code> Motor Driver <code>VIN</code> <code>GND</code> <p></p> <p></p> <p>A graphical representation of the connections between the RedBoard Plus and a breadboard with the TMC6300 motor driver attached.</p>"},{"location":"single_page/#example-code_1","title":"Example Code","text":"<p>After installing and setting up the Arduino IDE and the Simple FOC Arduino library, users will need to upload the following example code to the RedBoard Plus. This code can be copied or downloaded below:</p> <p>  Download <code>DC.ino</code> Example Code </p> <p>Example Code</p> DC.ino<pre><code>    // BLDC driver standalone example\n#include &lt;SimpleFOC.h&gt;\n// BLDC driver instance\nBLDCDriver6PWM driver = BLDCDriver6PWM(5, 6, 9,10, 3, 11);\nvoid setup() {\n// pwm frequency to be used [Hz]\n// for atmega328 fixed to 32kHz\n// esp32/stm32/teensy configurable\ndriver.pwm_frequency = 32000;\n// power supply voltage [V]\ndriver.voltage_power_supply = 5;\n// Max DC voltage allowed - default voltage_power_supply\ndriver.voltage_limit = 5;\n// daad_zone [0,1] - default 0.02f - 2%\ndriver.dead_zone = 0.05f;\n// driver init\ndriver.init();\n// enable driver\ndriver.enable();\n_delay(1000);\n}\nvoid loop() {\ndriver.setPwm(5,0,0);\n_delay(1000);\ndriver.setPwm(0,5,0);\n_delay(1000);\n}\n</code></pre>"},{"location":"single_page/#running-the-motor_1","title":"Running the Motor","text":"<p>Be default, the motor should spin automatically. However, if users wish to control the motor, they can modify lines 30 and 33 of code and reprogram the RedBoard Plus. These lines control the high and low-side MOSFETS of the H-bridge directly through pins <code>5</code>, <code>6</code>, <code>9</code>, and <code>10</code>.</p> Code Changes Highlighted <p>MOdify the following lines of code (30 and 33):</p> DC.ino<pre><code>    // BLDC driver standalone example\n#include &lt;SimpleFOC.h&gt;\n// BLDC driver instance\nBLDCDriver6PWM driver = BLDCDriver6PWM(5, 6, 9,10, 3, 11);\nvoid setup() {\n// pwm frequency to be used [Hz]\n// for atmega328 fixed to 32kHz\n// esp32/stm32/teensy configurable\ndriver.pwm_frequency = 32000;\n// power supply voltage [V]\ndriver.voltage_power_supply = 5;\n// Max DC voltage allowed - default voltage_power_supply\ndriver.voltage_limit = 5;\n// daad_zone [0,1] - default 0.02f - 2%\ndriver.dead_zone = 0.05f;\n// driver init\ndriver.init();\n// enable driver\ndriver.enable();\n_delay(1000);\n}\nvoid loop() {\ndriver.setPwm(5,0,0);\n_delay(1000);\ndriver.setPwm(0,5,0);\n_delay(1000);\n}\n</code></pre> <ul> <li>The PWM voltage value <code>driver.setPwm(voltage_value,0,0)</code> affects the speed of the motor.</li> <li>The position of this value inr elation to the PWM drive channel <code>driver.setPwm(channel_v,channel_w,0)</code> affects the direction.</li> </ul> Tip <p>Users may also be interested in the SimpleDC Motor library to drive DC motors with the Simple FOC Arduino library.</p>"},{"location":"single_page/#troubleshooting-tips","title":"Troubleshooting Tips","text":"<p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search product forums and ask questions.</p> <p>Account Registration Required</p> <p>If this is your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"single_page/#esp32-compile-error","title":"ESP32 Compile Error","text":"<p>If users run into an error similar to, <code>fatal error: soc/soc_caps.h: No such file or directory</code>, it may be due to an issue with the version of the ESP32 Arduino core that is installed in the Boards Manager. Users should make sure the have the latest version of the ESP32 Arduino core installed; or at least a version later than <code>v2.0.1</code>.</p> <p>Info</p> <p>For more information, please reference this forum post for the Simple FOC Arduino library.</p>"},{"location":"single_page/#resources","title":"Resources:","text":""},{"location":"single_page/#product-resources","title":"Product Resources","text":"<ul> <li> Product Page</li> <li>Component Documentation<ul> <li> TMC6300 Datasheet</li> </ul> </li> <li> Design Files:<ul> <li> Board Dimensions</li> <li> Schematic</li> <li> Eagle Files</li> </ul> </li> <li>Arduino Library:<ul> <li> Simple FOC</li> <li> Documentation<ul> <li>Installation</li> <li>Supported Hardware</li> <li>Code Overview</li> </ul> </li> </ul> </li> <li> SFE Product Showcase</li> <li> Hardware Repo</li> </ul>"},{"location":"single_page/#additional-resources","title":"Additional Resources","text":"<ul> <li>Motors and Motor Driver Product Category</li> <li> SparkFun Technical Assistance</li> </ul>"},{"location":"single_page/#manufacturers-resources","title":"\ud83c\udfed\u00a0Manufacturer's Resources","text":"<p>Analog Devices + Trinamic also provides great resources for the TMC6300 motor driver:</p> <ul> <li>TMC6300 Product Page<ul> <li>Block Diagram/Pinout</li> <li> Datasheet</li> <li> Application Notes</li> </ul> </li> <li> Trinamic: TMC6300 Product Training Module</li> <li> Technical Support Page</li> </ul> <p> </p>"},{"location":"single_page/#background-resources","title":"Background Resources","text":"<p>Below, are several articles, application notes, and other technical resources on 3-phase motors and utilizing a field oriented control (FOC) scheme:</p> <ul> <li>Microchip Technology<ul> <li>AN885: Brushless DC (BLDC) Motor Fundamentals</li> <li>AN2757: Sensored (Encoder-Based) Field Oriented Control of Three-Phase Permanent Magnet Synchronous Motor (PMSM)</li> <li>AN1078: Sensorless Field Oriented Control of a PMSM</li> <li>AVR32723: Sensor Field Oriented Control for Brushless DC motors with AT32UC3B0256</li> </ul> </li> <li>Diodes Incorporated<ul> <li>AN1164: Introduction to Brushless DC Motors</li> </ul> </li> <li>Monolithic Power Systems<ul> <li>AN047: Brushless DC Motor Fundamentals</li> </ul> </li> <li>Texas Instruments<ul> <li>Demystifying BLDC motor commutation: Trap, Sine, &amp; FOC</li> <li>Sensored Field Oriented Control of 3-Phase Permanent Magnet Synchronous Motors</li> <li>Sensorless Field Oriented Control of 3-Phase Permanent Magnet Synchronous Motors</li> <li>Brushless-DC Motor Driver Considerations and Selection Guide</li> <li>High Performance Brushless DC Motor Control</li> <li> Field oriented control of permanent magnet synchronous motors</li> <li> Field Oriented Control of Permanent Magnet Motors<ul> <li> Field Oriented Control of Permanent Magnet Motors</li> </ul> </li> </ul> </li> <li>MATLAB<ul> <li> Motor Control, Part 4: Understanding Field-Oriented Control</li> </ul> </li> <li>Analog Devices + Trinamic<ul> <li>FOC As Hardware Building Block</li> </ul> </li> <li>Infineon Technologies<ul> <li>Motor Handbook</li> <li>AN204469 - FM3 Family 3-Phase PMSM FOC Control</li> <li>Block commutation vs. FOC in power tool motor control</li> <li> Motor control for BLDC: block commutation vs. field-oriented control</li> </ul> </li> <li>ST Microelectronics<ul> <li>AN5397: Current Sensing in Motion Control Applications</li> <li>AN4220: Sensorless Six-Step BLDC Commutation</li> </ul> </li> </ul>"},{"location":"software_overview/","title":"Installation & Setup","text":""},{"location":"software_overview/#arduino-ide","title":"Arduino IDE","text":"<p>Tip</p> <p>For first-time users, who have never programmed before and are looking to use the Arduino IDE, we recommend beginning with the SparkFun Inventor's Kit (SIK), which is designed to help users get started programming with the Arduino IDE.</p> <p>Most users may already be familiar with the Arduino IDE and its use. However, for those of you who have never heard the name Arduino before, feel free to check out the Arduino website. To get started with using the Arduino IDE, check out our tutorials below:</p> What is an Arduino? Installing Arduino IDE Installing an Arduino Library Installing Board Definitions in the Arduino IDE <ul> <li> <p> <p>What is an Arduino?</p> <li> <p> <p>Installing the Arduino IDE</p> <li> <p> <p>Installing an Arduino Library</p> <li> <p> <p>Installing Board Definitions in the Arduino IDE</p> Need help setting up the RedBoard Plus?"},{"location":"software_overview/#redboard-plus","title":"RedBoard Plus","text":"<p>The following instructions should help users get started with the RedBoard Plus. For more information about the board, please check out our hookup guide below:</p> <p> RedBoard Plus Hookup Guide </p>"},{"location":"software_overview/#ch340-driver","title":"CH340 Driver","text":"<p>Users will need to install the appropriate driver for their computer to recognize the serial-to-UART chip on their board/adapter. Most of the latest operating systems will recognize the CH340C chip on the board and automatically install the required driver.</p> <p>To manually install the CH340 driver on their computer, users can download it from the WCH website. For more information, check out our How to Install CH340 Drivers Tutorial.</p> <p> How to Install CH340 Drivers </p>"},{"location":"software_overview/#arduino-ide_1","title":"Arduino IDE","text":"<p>When selecting a board to program in the Arduino IDE, users should select the Arduino Uno from the Tools drop-down menu (_i.e. Tools &gt; Board &gt; Arduino AVR Boards &gt; Arduino Uno).</p> <p> Select the Arduino Uno from the Tools drop-down menu in the Arduino IDE. </p> Arduino IDE 2.x.x - Alternative Method <p>In the newest version of the Arduino IDE 2.<code>x</code>.<code>x</code>, users can also select their board (green) and port (blue) from the <code>Select Board &amp; Port</code> dropdown menu (yellow).</p> <p> Selecting the Arduino Uno and COM5 port from the Select Board &amp; Port drop-down menu in the Arduino IDE (v2.0.3). </p>"},{"location":"software_overview/#simplefoclibrary","title":"SimpleFOClibrary","text":"<p>The Simple Field Oriented Control Library can be installed from the library manager in the Arduino IDE.</p> <p></p> <p>SimpleFOClibrary in the library manager of the Arduino IDE.</p> Arduino IDE (v1.x.x) <p>In the Arduino IDE v1.x.x, the library manager will have the following appearance for the SimpleFOC library:</p> <p> SimpleFOClibrary in the library manager of the Arduino IDE (v1.x.x). </p> <p>This library utilizes a motor control scheme called field oriented control (FOC), which can utilize a feedback control loop to drive a motor with a higher power efficiency and precision characteristics, like evenly distributed torque control.</p> <p>Info</p> <p>For more details about the library, check out the online documentation.</p> <p>Supported Hardware</p> <p>For a detailed and up-to-date list of the hardware supported by this library, check out the library's documentation. The following are excerpts taken from the library's documentation page:</p> MicrocontrollersMotor DriversMotors <p>Arduino SimpleFOClibrary supports:</p> MCU 2 PWM mode 4 PWM mode 3 PWM mode 6 PWM mode pwm frequency config Arduino (8-bit) \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f (either 4kHz or 32kHz) Arduino DUE \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c \u2714\ufe0f stm32 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f esp32 MCPWM \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f esp32 LEDC \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c \u2714\ufe0f esp8266 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c \u2714\ufe0f samd21/51 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f teensy \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Raspberry Pi Pico \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Portenta H7 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c \u2714\ufe0f nRF52 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f <p>From this table you can see that if you need the 6 PWM mode for your application you should avoid using Teensy and Arduino DUE boards for now.</p> <p>Info</p> <p>For more details, please refer to the SimpleFOC Arduino library documentation.</p> <p>Arduino SimpleFOClibrary has a goal to support as many BLDC and stepper motor drivers as possible. Till this moment there are two kinds of motor drivers supported by this library:</p> <ul> <li>BLDC motor driver <ul> <li>3 PWM signals ( 3 phase )</li> <li>6 PWM signals ( 3 phase )</li> </ul> </li> </ul> Current Limitations <p>Before running any BLDC motor with the SimpleFOClibrary please make sure your hardware can handle the currents your motor requires. </p> <p>The simplest way to do it is by checking the motor phase resistance <code>R</code>. Either check the datasheet of your motor and search for the resistance value or measure it yourself using a multimeter. Then check the value of your power supply voltage <code>V_dc</code> and once when you have the values you can find the maximum current <code>I_max</code> value by calculating: <pre><code>I_max = V_dc/R\n</code></pre> Finally check the value of the maximum current <code>I_max</code> with the datasheet of your driver board. If the <code>I_max</code> is too high you can lower the power supply voltage <code>V_dc</code> in order prevent too high peaks of the current. If you are not able to change your power supply voltage you can limit the voltage set to motor in software.   <p>NOTE</p>     The equation above calculates the worst case maximum current <code>I_max</code> and in most cases calculated <code>I_max</code> is higher than the actual value. Maximum current depends both of the motor hardware such as winding configuration and the control algorithm. </p> <p>Tip</p> <p>While the TMC6300 isn't directly listed as part of the supported hardware for the SimpleFOC Arduino library, we have verified that is compatible with the library.</p> <p>Info</p> <p>For more details, please refer to the SimpleFOC Arduino library documentation.</p> <p>Arduino SimpleFOClibrary supports two types of BLDC motors:</p> <ul> <li> <p>BLDC motors</p> <ul> <li> <p>3 phase (3 wire):</p> Gimbal Motors <p>Gimbal motors will work basically with any BLDC motor driver, but since the high-performance drivers have current measurement circuits optimized for high currents you will not have any benefit of using them. Therefore low-power BLDC motor drivers will have comparable performance as the expensive high-power, high-performance drivers for gimbal motors. What is in my opinion very cool! \ud83d\ude03 This was one of the main motivations to start developing  SimpleFOCShield.</p> <p>Some of the characteristics of Gimbal motors are:</p> <ul> <li>High torque on low velocities</li> <li>Very smooth operation</li> <li>Internal resistance &gt;10\u03a9</li> <li>Currents up to 5A</li> </ul> <p>Gimbal motors are very versatile and their main benefit is very smooth operation on low speeds and high torque. They can be used in may different applications everywhere from being a high-quality replacement for your stepper motor or DC servo motor to very smooth camera gimbals and many different robotics applications. One of very interesting use cases are student experiments, where BLDC motors provide a very high degree of control and dynamics, such examples are ball and plate,  inverted pendulums, balancing robots and similar. </p> High-performance Motors <p>Gimbal motors are just a subset of all the BLDC motors there is. As suggested in previous chapters, when using high-torque ( currents &gt; 5A), low-resistance (~1\u03a9) BLDC motors such as drone motors make sure your BLDC driver can support the currents necessary. SimpleFOClibrary has been tested with several high performance BLDC drivers (supported BLDC drivers list). </p> </li> </ul> </li> <li> <p>Stepper motors</p> <ul> <li>2 phase (4 wire)</li> </ul> </li> </ul> Current Limitations <p>Before running any BLDC motor with the SimpleFOClibrary please make sure your hardware can handle the currents your motor requires. </p> <p>The simplest way to do it is by checking the motor phase resistance <code>R</code>. Either check the datasheet of your motor and search for the resistance value or measure it yourself using a multimeter. Then check the value of your power supply voltage <code>V_dc</code> and once when you have the values you can find the maximum current <code>I_max</code> value by calculating: <pre><code>I_max = V_dc/R\n</code></pre> Finally check the value of the maximum current <code>I_max</code> with the datasheet of your driver board. If the <code>I_max</code> is too high you can lower the power supply voltage <code>V_dc</code> in order prevent too high peaks of the current. If you are not able to change your power supply voltage you can limit the voltage set to motor in software.   <p>NOTE</p>     The equation above calculates the worst case maximum current <code>I_max</code> and in most cases calculated <code>I_max</code> is higher than the actual value. Maximum current depends both of the motor hardware such as winding configuration and the control algorithm. </p> <p>Info</p> <p>For more details, please refer to the SimpleFOC Arduino library documentation.</p>"},{"location":"software_overview/#6pwm-motor-driver","title":"6PWM Motor Driver","text":"<p>Users will need to utilize the <code>BLDCDriver6PWM</code> class to provide the six PWM signals required for the TMC6300 motor driver.</p> <code>BLDCDriver6PWM</code> <p>This class provides an abstraction layer for most of the common BLDC drivers, which require six PWM signals. This method offers more control than a three PWM motor drivers, since each of the 6 half-bridges MOSFETs can be controlled independently.</p> <p>To create the interface to the BLDC driver you need to specify the 6 <code>PWM</code> pin numbers for each motor phase and optionally <code>enable</code> pin. <pre><code>//  BLDCDriver6PWM( int phA_h, int phA_l, int phB_h, int phB_l, int phC_h, int phC_l, int en)\n//  - phA_h, phA_l - A phase pwm pin high/low pair \n//  - phB_h, phB_l - B phase pwm pin high/low pair\n//  - phB_h, phC_l - C phase pwm pin high/low pair\n//  - enable pin    - (optional input)\nBLDCDriver6PWM motor = BLDCDriver6PWM(5,6, 9,10, 3,11, 8);\n</code></pre></p> <p>Microcontroller Considerations</p> Arduino UnoSTM32ESP32 <p>Arduino UNO and all the atmega328 based boards have only 6 PWM pins and in order to use the <code>BLDCDrievr6PWM</code> we need to use all of them. Those are <code>3</code>,<code>5</code>,<code>6</code>,<code>9</code>,<code>10</code> and <code>11</code>.  Furthermore in order for the algorithm to work well we need to use the PWM pins that belong to the same timer for each high/low side pair of each phase. So Atmega328 pins belonging to the timers are:</p> <code>TIM0</code> <code>TIM1</code> <code>TIM2</code> <code>5</code>,<code>6</code> <code>9</code>,<code>10</code> <code>3</code>,<code>11</code> <p>Therefore it is important that <code>phA_h</code> and <code>phA_l</code> belong to one timer, <code>phB_h</code> and <code>phB_l</code> to second timer and <code>phC_h</code> and <code>phC_l</code> to the last timer. If we decide that phase <code>A</code> belongs to the timer <code>TIM0</code> we can set <code>phA_h</code> either to pin <code>5</code> or pin <code>6</code>. </p> <p>Stm32 boards have two possible 6 PWM modes:</p> <ul> <li>Hardware 6 PWM mode</li> <li>Software 6 PWM mode</li> </ul> <ul> <li> <p>Hardware PWM</p> <p>In hardware 6 PWM mode the user uses only one timer, usually Timer 1 for all the 6 PWM channels. Stm32 boards usually have at least one timer which has automatic complementary channels which avoids the need for a complicated channel inverting configuration. SimpleFOClibrary automatically enables this control mode if you provide the pins that support this interface to the constructor of the <code>BLDCDriver6PWM</code> class. For example, both STM32 Bluepill and STM32 Nucleo boards have this interface supported by pins:</p> <code>T1C1</code> <code>T1C2</code> <code>T1C3</code> <code>T1C1N</code> <code>T1C2N</code> <code>T1C3N</code> <code>PA8</code> <code>PA9</code> <code>PA10</code> <code>PB13</code> <code>PB14</code> <code>PB15</code> <p>Where <code>T1Cx</code> are the Timer 1 channels and <code>T1CxN</code> are their complementary channels (inverted channels). Each pair of <code>T1Cx</code> and <code>T1CxN</code> is used for one pair of the high/low PWM pins. The library will configure the necessary timers and registers if you provide these pins to the constrictor of the <code>BLDCDriver6PWM</code> class. For example: <pre><code>//  BLDCDriver6PWM( int phA_h, int phA_l, int phB_h, int phB_l, int phC_h, int phC_l, int en)\nBLDCDriver6PWM motor = BLDCDriver6PWM(PA8, PB13, PA9, PB14, PA10, PB15);\n</code></pre></p> </li> <li> <p>Software PWM</p> <p>If it is not possible to use the hardware 6 PWM mode with your board  SimpleFOClibrary enables you to use any two channels of any of the timers as your high/low side PWM pair. Basically, the library will automatically configure the complementary channels on the provided low side pins. The only requirement for this code to work properly is exatcly the same as for the Arudino UNO, each phase high/low PWM pair needs to belong to the same timer.  For example, if we take STM32 Nucleo F401RE board we can take for example: <pre><code>//  BLDCDriver6PWM( int phA_h, int phA_l, int phB_h, int phB_l, int phC_h, int phC_l, int en)\nBLDCDriver6PWM motor = BLDCDriver6PWM(7, 2, 6, 3, 5, 4);\n</code></pre> Where</p> <code>T1C1</code> <code>T1C3</code> <code>T2C3</code> <code>T2C2</code> <code>T3C1</code> <code>T3C2</code> <code>7</code> <code>2</code> <code>6</code> <code>3</code> <code>5</code> <code>4</code> <p>On Bluepill we could use: <pre><code>//  BLDCDriver6PWM( int phA_h, int phA_l, int phB_h, int phB_l, int phC_h, int phC_l, int en)\nBLDCDriver6PWM motor = BLDCDriver6PWM(PA8, PA9, PB6, PB7, PB8, PB9);\n</code></pre> Where</p> <code>T1C1</code> <code>T1C2</code> <code>T4C1</code> <code>T4C2</code> <code>T4C3</code> <code>T4C4</code> <code>PA8</code> <code>PA9</code> <code>PB6</code> <code>PB7</code> <code>PB8</code> <code>PB9</code> </li> </ul> <p>ESP32 boards support <code>MCPWM</code> interface that is intended for this kind of applications. Each ESP32 board has two of the <code>MCPWM</code> channels and can support two 6 PWM drivers. There is no pin specific requirements for the ESP32, each pin can be used in PWM mode. But please make sure not to use the pins that have predefined states on boot because this could result malfunction. You can find this information online easily, here is a YouTube video with more details. </p> <p>Info</p> <p>For more details about the <code>BLDCDriver6PWM</code> class, check out the online documentation.</p>"},{"location":"software_overview/#bldc-motor","title":"BLDC Motor","text":"<p>All BLDC motors are handled with the <code>BLDCMotor</code> class.</p> <code>BLDCMotor</code> <p>This class implements the BLDC FOC algorithm, motion control loops, and monitoring.</p> <p>To instantiate the BLDC motor we need to create an instance of the <code>BLDCMotor</code> class and provide it the number of <code>pole pairs</code> of the motor. <pre><code>//  BLDCMotor(int pp, (optional R, KV))\n//  - pp  - pole pair number\n//  - R   - phase resistance value - optional\n//  - KV  - motor KV rating [rpm/V] - optional\nBLDCMotor motor = BLDCMotor(11, 10.5, 120);\n</code></pre></p> <p>Motor Considerations</p> <p>While, the datasheet for our gimbal motor, indicates that there are 8 pole pairs, we have found that the motor operates more smoothly if the <code>BLDCMotor</code> class is instantiated with 7 pole pairs instead.</p> <pre><code>BLDCMotor motor = BLDCMotor(7);\n</code></pre> <p>Info</p> <p>For more details about the <code>BLDCMotor</code> class, check out the online documentation.</p>"},{"location":"software_overview/#motion-control","title":"Motion Control","text":"<p>Unless a feedback loop is incorporated when driving the motor (i.e. with position sensors or current sensing), users should implement the SimpleFOC library using the open-loop control.</p> <p>Open-Loop Motion Control Types:</p> <ul> <li>Velocity</li> <li>Position</li> </ul>"},{"location":"troubleshooting_tips/","title":"Troubleshooting Tips","text":"<p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search product forums and ask questions.</p> <p>Account Registration Required</p> <p>If this is your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"troubleshooting_tips/#esp32-compile-error","title":"ESP32 Compile Error","text":"<p>If users run into an error similar to, <code>fatal error: soc/soc_caps.h: No such file or directory</code>, it may be due to an issue with the version of the ESP32 Arduino core that is installed in the Boards Manager. Users should make sure the have the latest version of the ESP32 Arduino core installed; or at least a version later than <code>v2.0.1</code>.</p> <p>Info</p> <p>For more information, please reference this forum post for the Simple FOC Arduino library.</p>"},{"location":"arduino_examples/example-BLDC/","title":"Example - Basic","text":""},{"location":"arduino_examples/example-BLDC/#hardware-assembly","title":"Hardware Assembly","text":"<p>Users should already have followed the instructions from the component assembly and example setups sections to setup their hardware for this example.</p> <p></p> <p>A graphical representation of the connections between the RedBoard Plus and a breadboard with the TMC6300 motor driver attached.</p>"},{"location":"arduino_examples/example-BLDC/#redboard-plus-to-tmc6300","title":"RedBoard Plus to TMC6300","text":"<p>Connect the following pins from the RedBoard Plus to the TMC6300.</p> <p> RedBoard <code>3</code> <code>5</code> <code>6</code> <code>9</code> <code>10</code> <code>11</code> <code>12</code> <code>GND</code> Motor Driver <code>UL</code> <code>WL</code> <code>WH</code> <code>VL</code> <code>VH</code> <code>UH</code> <code>VIO</code> <code>GND</code> <p></p> <p></p> <p>A graphical representation of the connections between the RedBoard Plus and a breadboard with the TMC6300 motor driver attached.</p>"},{"location":"arduino_examples/example-BLDC/#connecting-the-gimbal-motor","title":"Connecting the Gimbal Motor","text":"<p>Connecting a 3-phase, BLDC motor to the motor driver is relatively simple as the sequence of the wires connection doesn't matter. Using jumper wires, connect the prepared ends of the gimbal stabilizer motor to the <code>U</code>, <code>V</code>, and <code>W</code> pins of the TMC6300 breakout board.</p> <p></p> <p>A prepared end of the gimbal motor being inserted into the female terminals of a jumper wire.</p>"},{"location":"arduino_examples/example-BLDC/#powering-the-tmc6300","title":"Powering the TMC6300","text":"<p>If users are unable to find a suitable power source, we have found that the 5V power output from the RedBoard Plus is sufficient to drive the gimbal motor, under a no load condition at low speeds.</p> <p> RedBoard <code>5V</code> <code>GND</code> Motor Driver <code>VIN</code> <code>GND</code> <p></p> <p></p> <p>A graphical representation of the connections between the RedBoard Plus and a breadboard with the TMC6300 motor driver attached.</p>"},{"location":"arduino_examples/example-BLDC/#example-code","title":"Example Code","text":"<p>After installing and setting up the Arduino IDE and the Simple FOC Arduino library, users will need to upload the following example code to the RedBoard Plus. This code can be copied or downloaded below:</p> <p>  Download <code>BLDC.ino</code> Example Code </p> <p>Example Code</p> BLDC.ino<pre><code>    // Open loop motor control example\n#include &lt;SimpleFOC.h&gt;\n// BLDC motor &amp; driver instance\n// BLDCMotor motor = BLDCMotor(pole pair number);\nBLDCMotor motor = BLDCMotor(7);\n// BLDCDriver3PWM driver = BLDCDriver3PWM(pwmA, pwmB, pwmC, Enable(optional));\nBLDCDriver6PWM driver = BLDCDriver6PWM(5, 6, 9,10, 3, 11);\n// Stepper motor &amp; driver instance\n//StepperMotor motor = StepperMotor(50);\n//StepperDriver4PWM driver = StepperDriver4PWM(9, 5, 10, 6,  8);\n//target variable\nfloat target_velocity = 6;\n// // instantiate the commander\nCommander command = Commander(Serial);\n// void doTarget(char* cmd) { command.scalar(&amp;target_velocity, cmd); }\n// void doLimit(char* cmd) { command.scalar(&amp;motor.voltage_limit, cmd); }\nvoid setup() {\n// driver config\n// power supply voltage [V]\ndriver.voltage_power_supply = 5;\n// limit the maximal dc voltage the driver can set\n// as a protection measure for the low-resistance motors\n// this value is fixed on startup\ndriver.voltage_limit = 5;\n// pwm frequency to be used [Hz]\n// for atmega328 fixed to 32kHz\n// esp32/stm32/teensy configurable\ndriver.pwm_frequency = 32000;\ndriver.init();\n// link the motor and the driver\nmotor.linkDriver(&amp;driver);\n// limiting motor movements\n// limit the voltage to be set to the motor\n// start very low for high resistance motors\n// current = voltage / resistance, so try to be well under 1Amp\nmotor.voltage_limit = 3;   // [V]\n// open loop control config\nmotor.controller = MotionControlType::velocity_openloop;\n// init motor hardware\nmotor.init();\n// add target command T\n// command.add('T', doTarget, \"target velocity\");\n// command.add('L', doLimit, \"voltage limit\");\nSerial.begin(115200);\nSerial.println(\"Motor ready!\");\nSerial.println(\"Set target velocity [rad/s]\");\n_delay(1000);\n}\nvoid loop() {\n// open loop velocity movement\n// using motor.voltage_limit and motor.velocity_limit\nmotor.move(target_velocity);\n// user communication\ncommand.run();\n}\n</code></pre>"},{"location":"arduino_examples/example-BLDC/#running-the-motor","title":"Running the Motor","text":"<p>Be default, the motor should spin automatically. However, if users wish to control the speed of the motor, they can uncomment lines 21-22 and 56-57 of code and reprogram the RedBoard Plus.</p> Code Changes Highlighted <p>Uncomment the following lines of code (21-22 and 56-57):</p> BLDC.ino<pre><code>    // Open loop motor control example\n#include &lt;SimpleFOC.h&gt;\n// BLDC motor &amp; driver instance\n// BLDCMotor motor = BLDCMotor(pole pair number);\nBLDCMotor motor = BLDCMotor(7);\n// BLDCDriver3PWM driver = BLDCDriver3PWM(pwmA, pwmB, pwmC, Enable(optional));\nBLDCDriver6PWM driver = BLDCDriver6PWM(5, 6, 9,10, 3, 11);\n// Stepper motor &amp; driver instance\n//StepperMotor motor = StepperMotor(50);\n//StepperDriver4PWM driver = StepperDriver4PWM(9, 5, 10, 6,  8);\n//target variable\nfloat target_velocity = 6;\n// // instantiate the commander\nCommander command = Commander(Serial);\n// void doTarget(char* cmd) { command.scalar(&amp;target_velocity, cmd); }\n// void doLimit(char* cmd) { command.scalar(&amp;motor.voltage_limit, cmd); }\nvoid setup() {\n// driver config\n// power supply voltage [V]\ndriver.voltage_power_supply = 5;\n// limit the maximal dc voltage the driver can set\n// as a protection measure for the low-resistance motors\n// this value is fixed on startup\ndriver.voltage_limit = 5;\n// pwm frequency to be used [Hz]\n// for atmega328 fixed to 32kHz\n// esp32/stm32/teensy configurable\ndriver.pwm_frequency = 32000;\ndriver.init();\n// link the motor and the driver\nmotor.linkDriver(&amp;driver);\n// limiting motor movements\n// limit the voltage to be set to the motor\n// start very low for high resistance motors\n// current = voltage / resistance, so try to be well under 1Amp\nmotor.voltage_limit = 3;   // [V]\n// open loop control config\nmotor.controller = MotionControlType::velocity_openloop;\n// init motor hardware\nmotor.init();\n// add target command T\n// command.add('T', doTarget, \"target velocity\");\n// command.add('L', doLimit, \"voltage limit\");\nSerial.begin(115200);\nSerial.println(\"Motor ready!\");\nSerial.println(\"Set target velocity [rad/s]\");\n_delay(1000);\n}\nvoid loop() {\n// open loop velocity movement\n// using motor.voltage_limit and motor.velocity_limit\nmotor.move(target_velocity);\n// user communication\ncommand.run();\n}\n</code></pre> <p>In order to drive the motor, users will need to access the serial monitor and provide the commands necessary to drive the motor. A full list of the available commands can be found in the Simple FOC Arduino library documentation. However, only the <code>T</code> and <code>L</code> commands are enabled in the example code.</p> <ul> <li>Sending a <code>T</code> command will set the target motor velocity in rads/s<ul> <li>Example - Entering <code>T6</code> into the serial monitor, will set the target motor velocity to 6 radians/s.</li> </ul> </li> <li>Sending a <code>L</code> command will set the voltage limit of the motor driver and in turn, the current limit (voltage_limit / motor_resistance)<ul> <li>Example - Entering <code>L5</code> into the serial monitor, will set the voltage limit to 5V and the current limit to .5A (5V/10\u03a9).</li> </ul> </li> </ul> <p>Baud Rate</p> <p>THe serial monitor baud rate should be configured to 115200bps.</p>"},{"location":"arduino_examples/example-DC/","title":"Example - H-Bridge","text":""},{"location":"arduino_examples/example-DC/#hardware-assembly","title":"Hardware Assembly","text":"<p>Users should already have followed the instructions from the component assembly and example setups sections to setup their hardware for this example.</p> <p></p> <p>A graphical representation of the connections between the RedBoard Plus and a breadboard with the TMC6300 motor driver attached.</p>"},{"location":"arduino_examples/example-DC/#redboard-plus-to-tmc6300","title":"RedBoard Plus to TMC6300","text":"<p>Connect the following pins from the RedBoard Plus to the TMC6300.</p> <p> RedBoard <code>3</code> <code>5</code> <code>6</code> <code>9</code> <code>10</code> <code>11</code> <code>12</code> <code>GND</code> Motor Driver <code>UL</code> <code>WL</code> <code>WH</code> <code>VL</code> <code>VH</code> <code>UH</code> <code>VIO</code> <code>GND</code> <p></p> <p></p> <p>A graphical representation of the connections between the RedBoard Plus and a breadboard with the TMC6300 motor driver attached.</p>"},{"location":"arduino_examples/example-DC/#connecting-the-dc-motor","title":"Connecting the DC Motor","text":"<p>If this was a H-bridge motor driver, the connections to the motor wouldn't matter. However, as there are three half-bridges, users will need to note which half-bridges the DC motor is connected to. These connections will dictate how the motor is driven by the software. For the example, connect the motor to the <code>V</code> and <code>W</code> output channels of the TMC6300 motor driver.</p>"},{"location":"arduino_examples/example-DC/#powering-the-tmc6300","title":"Powering the TMC6300","text":"<p>If users are unable to find a suitable power source, we have found that the 5V power output from the RedBoard Plus is sufficient to drive the gimbal motor, under a no load condition at low speeds.</p> <p> RedBoard <code>5V</code> <code>GND</code> Motor Driver <code>VIN</code> <code>GND</code> <p></p> <p></p> <p>A graphical representation of the connections between the RedBoard Plus and a breadboard with the TMC6300 motor driver attached.</p>"},{"location":"arduino_examples/example-DC/#example-code","title":"Example Code","text":"<p>After installing and setting up the Arduino IDE and the Simple FOC Arduino library, users will need to upload the following example code to the RedBoard Plus. This code can be copied or downloaded below:</p> <p>  Download <code>DC.ino</code> Example Code </p> <p>Example Code</p> DC.ino<pre><code>    // BLDC driver standalone example\n#include &lt;SimpleFOC.h&gt;\n// BLDC driver instance\nBLDCDriver6PWM driver = BLDCDriver6PWM(5, 6, 9,10, 3, 11);\nvoid setup() {\n// pwm frequency to be used [Hz]\n// for atmega328 fixed to 32kHz\n// esp32/stm32/teensy configurable\ndriver.pwm_frequency = 32000;\n// power supply voltage [V]\ndriver.voltage_power_supply = 5;\n// Max DC voltage allowed - default voltage_power_supply\ndriver.voltage_limit = 5;\n// daad_zone [0,1] - default 0.02f - 2%\ndriver.dead_zone = 0.05f;\n// driver init\ndriver.init();\n// enable driver\ndriver.enable();\n_delay(1000);\n}\nvoid loop() {\ndriver.setPwm(5,0,0);\n_delay(1000);\ndriver.setPwm(0,5,0);\n_delay(1000);\n}\n</code></pre>"},{"location":"arduino_examples/example-DC/#running-the-motor","title":"Running the Motor","text":"<p>Be default, the motor should spin automatically. However, if users wish to control the motor, they can modify lines 30 and 33 of code and reprogram the RedBoard Plus. These lines control the high and low-side MOSFETS of the H-bridge directly through pins <code>5</code>, <code>6</code>, <code>9</code>, and <code>10</code>.</p> Code Changes Highlighted <p>MOdify the following lines of code (30 and 33):</p> DC.ino<pre><code>    // BLDC driver standalone example\n#include &lt;SimpleFOC.h&gt;\n// BLDC driver instance\nBLDCDriver6PWM driver = BLDCDriver6PWM(5, 6, 9,10, 3, 11);\nvoid setup() {\n// pwm frequency to be used [Hz]\n// for atmega328 fixed to 32kHz\n// esp32/stm32/teensy configurable\ndriver.pwm_frequency = 32000;\n// power supply voltage [V]\ndriver.voltage_power_supply = 5;\n// Max DC voltage allowed - default voltage_power_supply\ndriver.voltage_limit = 5;\n// daad_zone [0,1] - default 0.02f - 2%\ndriver.dead_zone = 0.05f;\n// driver init\ndriver.init();\n// enable driver\ndriver.enable();\n_delay(1000);\n}\nvoid loop() {\ndriver.setPwm(5,0,0);\n_delay(1000);\ndriver.setPwm(0,5,0);\n_delay(1000);\n}\n</code></pre> <ul> <li>The PWM voltage value <code>driver.setPwm(voltage_value,0,0)</code> affects the speed of the motor.</li> <li>The position of this value inr elation to the PWM drive channel <code>driver.setPwm(channel_v,channel_w,0)</code> affects the direction.</li> </ul> Tip <p>Users may also be interested in the SimpleDC Motor library to drive DC motors with the Simple FOC Arduino library.</p>"},{"location":"board_files/","title":"board_files directory","text":"<ol> <li>A <code>dimensions*.pdf</code> file containing the board's measurements.</li> <li>A <code>schematic.pdf</code> file containing the board's schematics.</li> <li>An <code>eagle_files*.zip</code> folder containing the Eagle CAD schematics (<code>*.sch</code>) and PCB design (<code>*.brd</code>) files.<ul> <li>A freeware version of Autodesk Eagle can be found here. </li> </ul> </li> </ol>"},{"location":"component_documentation/","title":"component_documentation directory","text":"<p>A copy of the datasheets, user manuals, programming guides, etc. of the major electrical components on the board.</p> <ul> <li>TMC6300 Datasheet (PDF)</li> </ul>"},{"location":"github/","title":"github directory","text":"<p>This folder should contain the instructions for submitting issues and pull requests for this project</p>"},{"location":"github/contribute/","title":"Contribute: Make an Augmentation!","text":"<p>Spot an improvement opportunity? Feel free to contribute to our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun TMC6300 motor driver repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your corrections or improvements to the markdown file.</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun TMC6300 motor driver repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-enhancement","title":"Submit a Design Enhancement","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provide some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. This Submit Issues page is not where users should seek assistance.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search the product forums and ask questions.</p> <p>Account Registration Required</p> <p>For your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of our documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun TMC6300 motor driver repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"\ud83d\udd0d Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun TMC6300 motor driver repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense? \ud83e\udd14","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board? \ud83e\udd26","text":"<p>If part of the board's functionality is missing, please open an issue and file a feature request.</p> <p>Design Considerations</p> <p>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements.</p> <ul> <li>For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"img/","title":"img directory","text":"<p>This folder should contain the images for the product documentation</p>"},{"location":"img/#general-images","title":"General Images","text":"<ul> <li><code>sfe_logo_sm.png</code> - SparkFun flame logo (Cover page for with-pdf extension)</li> <li><code>sfe_logo_sq.png</code> - SparkFun flame logo (favicon)</li> </ul>"},{"location":"img/#directory","title":"Directory","text":"<ul> <li><code>hookup_guide</code> - Images for the hookup guide pages</li> </ul>"},{"location":"img/#qr-codes","title":"QR Codes","text":"<ul> <li>QR code generator<ul> <li>Flame Color: #E0311D</li> <li>Frame Color: #3C464D</li> </ul> </li> <li>Remove meta data from svg</li> </ul>"},{"location":"img/hookup_guide/","title":"img/hookup_guide directory","text":"<p>This folder should contain the images for the hookup guide pages</p>"},{"location":"stylesheet/REAMDE/","title":"stylesheet directory","text":"<p>This folder should contain the files used for the webpage customizations of the product documentation</p>"}]}